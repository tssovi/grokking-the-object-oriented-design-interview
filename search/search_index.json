{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Grokking the Object Oriented Design Interview","text":"<p>A comprehensive guide to mastering object-oriented design interviews, featuring detailed case studies and practical Python implementations.</p>"},{"location":"#what-youll-learn","title":"What You'll Learn","text":"<p>This guide covers everything you need to know about object-oriented design interviews, including:</p> <ul> <li>Object-Oriented Design Fundamentals</li> <li>UML Diagrams: Class diagrams, sequence diagrams, activity diagrams, and more</li> <li>16 Real-World Case Studies: Step-by-step designs for systems like Library Management, Parking Lot, Amazon Shopping, and more</li> <li>Implementation Examples: Python code examples for every case study</li> </ul>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Detailed Requirements Analysis: Learn how to clarify system requirements</li> <li>Visual UML Diagrams: Understand how to represent your design using industry-standard notations</li> <li>Complete Python Code: Explore working implementations of each design</li> <li>Practical Methodology: Follow a proven approach to solving OOD problems</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Choose a section to begin your learning journey:</p> <ul> <li> Object-Oriented Design and UML</li> </ul> <p>Learn the fundamentals of object-oriented programming, design principles, and UML diagramming techniques.</p> <ul> <li> Design Case Studies   Explore 16 practical object-oriented design case studies with detailed diagrams and Python implementations.</li> </ul>"},{"location":"#about-this-guide","title":"About This Guide","text":"<p>This website is based on the original content from the Grokking the Object Oriented Design Interview course from Educative.io, enhanced with additional code examples.</p>"},{"location":"about/","title":"About This Project","text":""},{"location":"about/#origin-of-the-content","title":"Origin of the Content","text":"<p>This website is based on the \"Grokking the Object Oriented Design Interview\" course from Educative.io, enhanced with additional code examples and improved navigation.</p> <p>The original repository contains:</p> <ol> <li>Object-Oriented Design and UML: Theoretical foundation materials</li> <li>Object-Oriented Design Case Studies: 16 practical system design examples</li> <li>Example codes: Python implementation examples for each system</li> <li>Media files: Diagrams, UML charts, and visual assets</li> </ol>"},{"location":"about/#technology-used","title":"Technology Used","text":"<p>This website is built using:</p> <ul> <li>MkDocs: A fast, simple static site generator</li> <li>Material for MkDocs: A beautiful theme with enhanced features</li> <li>Python: All code examples are implemented in Python</li> </ul>"},{"location":"about/#how-to-use-this-resource","title":"How to Use This Resource","text":"<ol> <li>Learn Systematically: Start with the OOP fundamentals and UML section before diving into case studies</li> <li>Practice Actively: Try to design the systems yourself before looking at the provided solutions</li> <li>Study the Code: Examine the Python implementations to understand how the designs translate to code</li> <li>Apply the Methodology: Use the same systematic approach for your own interview preparation</li> </ol>"},{"location":"about/#contributing","title":"Contributing","text":"<p>If you find any issues or have suggestions for improvement, please feel free to contribute by:</p> <ol> <li>Opening an issue on GitHub</li> <li>Submitting a pull request with your proposed changes</li> <li>Suggesting additional case studies or improvements to existing ones</li> </ol>"},{"location":"about/#acknowledgements","title":"Acknowledgements","text":"<p>Special thanks to:</p> <ul> <li>Educative.io for the original course content</li> <li>Contributors who have helped enhance the material</li> <li>The open-source community for providing the tools used to build this site</li> </ul>"},{"location":"about/#disclaimer","title":"Disclaimer","text":"<p>This website is intended for educational purposes only. The content is designed to help with interview preparation and learning object-oriented design principles.</p>"},{"location":"case-studies/","title":"Object-Oriented Design Case Studies","text":"<p>This section contains 16 comprehensive case studies that demonstrate how to apply object-oriented design principles to real-world systems.</p>"},{"location":"case-studies/#how-to-use-these-case-studies","title":"How to Use These Case Studies","text":"<p>Each case study follows a consistent approach:</p> <ol> <li>System Requirements: Clear specifications of what the system should do</li> <li>Use Case Diagrams: Visual representation of system actors and their interactions</li> <li>Class Diagrams: Detailed structure of classes, attributes, and relationships</li> <li>Activity Diagrams: Flow of activities in key operations</li> <li>Code Implementation: Python examples demonstrating the design</li> </ol>"},{"location":"case-studies/#available-case-studies","title":"Available Case Studies","text":"<ul> <li> Library Management System</li> </ul> <p>Design a system to handle book checkouts, returns, and reservations.</p> <ul> <li> Parking Lot</li> </ul> <p>Design a system to manage parking spaces, tickets, and payments.</p> <ul> <li> Amazon Shopping System</li> </ul> <p>Design an online shopping platform with products, shopping carts, and orders.</p> <ul> <li> Stack Overflow</li> </ul> <p>Design a Q&amp;A platform with questions, answers, and voting.</p> <ul> <li> Movie Ticket Booking</li> </ul> <p>Design a system for browsing movies and booking tickets.</p> <ul> <li> ATM</li> </ul> <p>Design an automated teller machine with various banking operations.</p> <ul> <li> Airline Management</li> </ul> <p>Design a system for flight scheduling and reservation.</p> <ul> <li> Blackjack and Cards</li> </ul> <p>Design a card game system with deck management and game rules.</p> <ul> <li> Hotel Management</li> </ul> <p>Design a system for room booking and hotel services.</p> <ul> <li> Restaurant Management</li> </ul> <p>Design a system for table reservations, ordering, and kitchen management.</p> <ul> <li> Chess</li> </ul> <p>Design a chess game with pieces, moves, and game mechanics.</p> <ul> <li> Stock Brokerage</li> </ul> <p>Design a system for trading stocks and managing portfolios.</p> <ul> <li> Car Rental</li> </ul> <p>Design a system for car rentals, reservations, and returns.</p> <ul> <li> LinkedIn</li> </ul> <p>Design a professional social network with profiles and connections.</p> <ul> <li> Cricinfo</li> </ul> <p>Design a cricket information and statistics system.</p> <ul> <li> Facebook</li> </ul> <p>Design a social network with profiles, posts, and friend connections.</p>"},{"location":"case-studies/#approach-to-solving-ood-problems","title":"Approach to Solving OOD Problems","text":"<p>When tackling these case studies, follow this systematic approach:</p> <ol> <li>Clarify Requirements: Understand what the system needs to do</li> <li>Identify Key Objects: Determine the major entities in the system</li> <li>Establish Relationships: Define how objects interact with each other</li> <li>Design Interfaces: Define methods and properties for each class</li> <li>Consider Edge Cases: Think about error conditions and special scenarios</li> <li>Implement Core Components: Write code for the essential functionality</li> </ol> <p>Real-World Application</p> <p>These case studies are simplified for learning purposes. Real-world systems would include additional considerations like persistence, security, and scalability.</p>"},{"location":"case-studies/design-a-car-rental-system/","title":"Design a Car Rental System","text":""},{"location":"case-studies/design-a-car-rental-system/#lets-design-a-car-rental-system","title":"Let's design a Car Rental System","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagrams</li> <li>Code</li> </ul> <p>A Car Rental System is a software built to handle the renting of automobiles for a short period of time, generally ranging from a few hours to a few weeks. A car rental system often has numerous local branches (to allow its user to return a vehicle to a different location), and primarily located near airports or busy city areas.</p> <p></p> <p>Car Rental System</p>"},{"location":"case-studies/design-a-car-rental-system/#system-requirements","title":"System Requirements","text":"<p>We will focus on the following set of requirements while designing our Car Rental System:</p> <ol> <li>The system will support the renting of different automobiles like cars, trucks, SUVs, vans, and motorcycles.</li> <li>Each vehicle should be added with a unique barcode and other details, including a parking stall number which helps to locate the vehicle.</li> <li>The system should be able to retrieve information like which member took a particular vehicle or what vehicles have been rented out by a specific member.</li> <li>The system should collect a late-fee for vehicles returned after the due date.</li> <li>Members should be able to search the vehicle inventory and reserve any available vehicle.</li> <li>The system should be able to send notifications whenever the reservation is approaching the pick-up date, as well as when the vehicle is nearing the due date or has not been returned within the due date.</li> <li>The system will be able to read barcodes from vehicles.</li> <li>Members should be able to cancel their reservations.</li> <li>The system should maintain a vehicle log to track all events related to the vehicles.</li> <li>Members can add rental insurance to their reservation.</li> <li>Members can rent additional equipment, like navigation, child seat, ski rack, etc.</li> <li>Members can add additional services to their reservation, such as roadside assistance, additional driver, wifi, etc.</li> </ol>"},{"location":"case-studies/design-a-car-rental-system/#use-case-diagram","title":"Use Case Diagram","text":"<p>We have four main Actors in our system:</p> <ul> <li>Receptionist: Mainly responsible for adding and modifying vehicles and workers. Receptionists can also reserve vehicles.</li> <li>Member: All members can search the catalog, as well as reserve, pick-up, and return a vehicle.</li> <li>System: Mainly responsible for sending notifications about overdue vehicles, canceled reservation, etc.</li> <li>Worker: Mainly responsible for taking care of a returned vehicle and updating the vehicle log.</li> </ul> <p>Here are the top use cases of the Car Rental System:</p> <ul> <li>Add/Remove/Edit vehicle: To add, remove or modify a vehicle.</li> <li>Search catalog: To search for vehicles by type and availability.</li> <li>Register new account/Cancel membership: To add a new member or cancel an existing membership.</li> <li>Reserve vehicle: To reserve a vehicle.</li> <li>Check-out vehicle: To rent a vehicle.</li> <li>Return a vehicle: To return a vehicle which was checked-out to a member.</li> <li>Add equipment: To add an equipment to a reservation like navigation, child seat, etc.</li> <li>Update car log: To add or update a car log entry, such as refueling, cleaning, damage, etc.</li> </ul> <p>Here is the use case diagram of our Car Rental System:</p> <p></p> <p>Use Case Diagram for Car Rental System</p>"},{"location":"case-studies/design-a-car-rental-system/#class-diagram","title":"Class Diagram","text":"<p>Here are the main classes of our Car Rental System:</p> <ul> <li>CarRentalSystem: The main part of the organization for which this software has been designed.</li> <li>CarRentalLocation: The car rental system will have multiple locations, each location will have attributes like \u2018Name\u2019 to distinguish it from any other locations and \u2018Address\u2019 which defines the address of the rental location.</li> <li>Vehicle: The basic building block of the system. Every vehicle will have a barcode, license plate number, passenger capacity, model, make, mileage, etc. Vehicles can be of multiple types, like car, truck, SUV, etc.</li> <li>Account: Mainly, we will have two types of accounts in the system, one will be a general member and the other will be a receptionist. Another account can be of the worker taking care of the returned vehicle.</li> <li>VehicleReservation: This class will be responsible for managing reservations for a vehicle.</li> <li>Notification: Will take care of sending notifications to members.</li> <li>VehicleLog: To keep track of all the events related to a vehicle.</li> <li>RentalInsurance: Stores details about the various rental insurances that members can add to their reservation.</li> <li>Equipment: Stores details about the various types of equipment that members can add to their reservation.</li> <li>Service: Stores details about the various types of service that members can add to their reservation, such as additional drivers, roadside assistance, etc.</li> <li>Bill: Contains different bill-items for every charge for the reservation.</li> </ul> <p></p> <p>Class Diagram for Car Rental System</p> <p></p> <p>UML for Car Rental System</p>"},{"location":"case-studies/design-a-car-rental-system/#activity-diagrams","title":"Activity Diagrams","text":"<p>Pick up a vehicle: Any member can perform this activity. Here are the steps to pick up a vehicle:</p> <p></p> <p>Activity Diagram for Car Rental System Pick Up</p> <p>Return a vehicle: Any worker can perform this activity. While returning a vehicle, the system must collect a late fee from the member if the return date is after the due date. Here are the steps for returning a vehicle:</p> <p></p> <p>Activity Diagram for Car Rental System Return</p>"},{"location":"case-studies/design-a-car-rental-system/#code","title":"Code","text":"<p>Here is the high-level definition for the classes described above.</p> <p>Enums, data types and constants: Here are the required enums, data types, and constants:</p> <pre><code>from enum import Enum\n\n\nclass BillItemType(Enum):\n    BASE_CHARGE, ADDITIONAL_SERVICE, FINE, OTHER = 1, 2, 3, 4\n\n\nclass VehicleLogType(Enum):\n    ACCIDENT, FUELING, CLEANING_SERVICE, OIL_CHANGE, REPAIR, OTHER = 1, 2, 3, 4, 5, 6\n\n\nclass VanType(Enum):\n    PASSENGER, CARGO = 1, 2\n\n\nclass CarType(Enum):\n    ECONOMY, COMPACT, INTERMEDIATE, STANDARD, FULL_SIZE, PREMIUM, LUXURY = 1, 2, 3, 4, 5, 6, 7\n\n\nclass VehicleStatus(Enum):\n    AVAILABLE, RESERVED, LOANED, LOST, BEING_SERVICED, OTHER = 1, 2, 3, 4, 5, 6\n\n\nclass ReservationStatus(Enum):\n    ACTIVE, PENDING, CONFIRMED, COMPLETED, CANCELLED, NONE = 1, 2, 3, 4, 5, 6\n\n\nclass AccountStatus(Enum):\n    ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED = 1, 2, 3, 4, 5\n\n\nclass PaymentStatus(Enum):\n    UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n\nclass Address:\n    def __init__(self, street, city, state, zip_code, country):\n        self.__street_address = street\n        self.__city = city\n        self.__state = state\n        self.__zip_code = zip_code\n        self.__country = country\n\n\nclass Person():\n    def __init__(self, name, address, email, phone):\n        self.__name = name\n        self.__address = address\n        self.__email = email\n        self.__phone = phone\n</code></pre> <p>Account, Member, Receptionist, and Additional Driver: These classes represent different people that interact with our system:</p> <pre><code>from abc import ABC\nfrom .constants import AccountStatus\n\n\n# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nclass Account(ABC):\n    def __init__(self, id, password, person, status=AccountStatus.NONE):\n        self.__id = id\n        self.__password = password\n        self.__status = AccountStatus.NONE\n        self.__person = person\n\n    def reset_password(self):\n        None\n\n\nclass Member(Account):\n    def __init__(self):\n        self.__total_vehicles_reserved = 0\n\n    def get_reservations(self):\n        None\n\n\nclass Receptionist(Account):\n    def __init__(self, date_joined):\n        self.__date_joined = date_joined\n\n    def search_member(self, name):\n        None\n\n\nclass AdditionalDriver:\n    def __init__(self, id, person):\n        self.__driver_id = id\n        self.__person = person\n</code></pre> <p>CarRentalSystem and CarRentalLocation: These classes represent the top level classes:</p> CarRentalLocation Class <pre><code>class CarRentalLocation:\n    def __init__(self, name, address):\n        self.__name = name\n        self.__location = address\n\n    def get_location(self):\n        return self.__location\n\n\nclass CarRentalSystem:\n    def __init__(self, name):\n        self.__name = name\n        self.__locations = []\n\n    def add_new_location(self, location):\n        None\n</code></pre> <p>Vehicle, VehicleLog, and VehicleReservation: To encapsulate a vehicle, log, and reservation. The VehicleReservation class will be responsible for processing the reservation and return of a vehicle:</p> <pre><code>from abc import ABC\nfrom datetime import datetime\nfrom .constants import ReservationStatus\n\n\nclass Vehicle(ABC):\n    def __init__(self, license_num, stock_num, capacity, barcode, has_sunroof, status, model, make, manufacturing_year,\n                 mileage):\n        self.__license_number = license_num\n        self.__stock_number = stock_num\n        self.__passenger_capacity = capacity\n        self.__barcode = barcode\n        self.__has_sunroof = has_sunroof\n        self.__status = status\n        self.__model = model\n        self.__make = make\n        self.__manufacturing_year = manufacturing_year\n        self.__mileage = mileage\n        self.__log = []\n\n    def reserve_vehicle(self):\n        None\n\n    def return_vehicle(self):\n        None\n\n\nclass Car(Vehicle):\n    def __init__(self, license_num, stock_num, capacity, barcode, has_sunroof, status, model, make, manufacturing_year,\n                 mileage, type):\n        super().__init__(license_num, stock_num, capacity, barcode,\n                         has_sunroof, status, model, make, manufacturing_year, mileage)\n        self.__type = type\n\n\nclass Van(Vehicle):\n    def __init__(self, license_num, stock_num, capacity, barcode, has_sunroof, status, model, make, manufacturing_year,\n                 mileage, type):\n        super().__init__(license_num, stock_num, capacity, barcode,\n                         has_sunroof, status, model, make, manufacturing_year, mileage)\n        self.__type = type\n\n\nclass Truck(Vehicle):\n    def __init__(self, license_num, stock_num, capacity, barcode, has_sunroof, status, model, make, manufacturing_year,\n                 mileage, type):\n        super().__init__(license_num, stock_num, capacity, barcode,\n                         has_sunroof, status, model, make, manufacturing_year, mileage)\n        self.__type = type\n\n\n# We can have similar definition for other vehicle types\n\n# ...\n\nclass VehicleLog:\n    def __init__(self, id, type, description, creation_date):\n        self.__id = id\n        self.__type = type\n        self.__description = description\n        self.__creation_date = creation_date\n\n    def update(self):\n        None\n\n    def search_by_log_type(self, type):\n        None\n\n\nclass VehicleReservation:\n    def __init__(self, reservation_number):\n        self.__reservation_number = reservation_number\n        self.__creation_date = datetime.date.today()\n        self.__status = ReservationStatus.ACTIVE\n        self.__due_date = datetime.date.today()\n        self.__return_date = datetime.date.today()\n        self.__pickup_location_name = \"\"\n        self.__return_location_name = \"\"\n\n        self.__customer_id = 0\n        self.__vehicle = None\n        self.__bill = None\n        self.__additional_drivers = []\n        self.__notifications = []\n        self.__insurances = []\n        self.__equipments = []\n        self.__services = []\n\n    def fetch_reservation_details(self, reservation_number):\n        None\n\n    def get_additional_drivers(self):\n        return self.__additional_drivers\n</code></pre> <p>VehicleInventory and Search: VehicleInventory will implement an interface \u2018Search\u2019 to facilitate the searching of vehicles:</p> <pre><code>from abc import ABC\n\n\nclass Search(ABC):\n    def search_by_type(self, type):\n        None\n\n    def search_by_model(self, model):\n        None\n\n\nclass VehicleInventory(Search):\n    def __init__(self):\n        self.__vehicle_types = {}\n        self.__vehicle_models = {}\n\n    def search_by_type(self, query):\n        # return all vehicles of the given type.\n        return self.__vehicle_types.get(query)\n\n    def search_by_model(self, query):\n        # return all vehicles of the given model.\n        return self.__vehicle_models.get(query)\n</code></pre>"},{"location":"case-studies/design-a-hotel-management-system/","title":"Design a Hotel Management System","text":""},{"location":"case-studies/design-a-hotel-management-system/#lets-design-a-hotel-management-system","title":"Let's design a Hotel Management System","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagrams</li> <li>Code</li> </ul> <p>A Hotel Management System is a software built to handle all online hotel activities easily and safely. This System will give the hotel management power and flexibility to manage the entire system from a single online portal. The system allows the manager to keep track of all the available rooms in the system as well as to book rooms and generate bills.</p> <p></p> <p>Hotel Management System</p>"},{"location":"case-studies/design-a-hotel-management-system/#system-requirements","title":"System Requirements","text":"<p>We\u2019ll focus on the following set of requirements while designing the Hotel Management System:</p> <ol> <li>The system should support the booking of different room types like standard, deluxe, family suite, etc.</li> <li>Guests should be able to search the room inventory and book any available room.</li> <li>The system should be able to retrieve information, such as who booked a particular room, or what rooms were booked by a specific customer.</li> <li>The system should allow customers to cancel their booking - and provide them with a full refund if the cancelation occurs before 24 hours of the check-in date.</li> <li>The system should be able to send notifications whenever the booking is nearing the check-in or check-out date.</li> <li>The system should maintain a room housekeeping log to keep track of all housekeeping tasks.</li> <li>Any customer should be able to add room services and food items.</li> <li>Customers can ask for different amenities.</li> <li>The customers should be able to pay their bills through credit card, check or cash.</li> </ol>"},{"location":"case-studies/design-a-hotel-management-system/#use-case-diagram","title":"Use Case Diagram","text":"<p>Here are the main Actors in our system:</p> <ul> <li>Guest: All guests can search the available rooms, as well as make a booking.</li> <li>Receptionist: Mainly responsible for adding and modifying rooms, creating room bookings, check-in, and check-out customers.</li> <li>System: Mainly responsible for sending notifications for room booking, cancellation, etc.</li> <li>Manager: Mainly responsible for adding new workers.</li> <li>Housekeeper: To add/modify housekeeping record of rooms.</li> <li>Server: To add/modify room service record of rooms.</li> </ul> <p>Here are the top use cases of the Hotel Management System:</p> <ul> <li>Add/Remove/Edit room: To add, remove, or modify a room in the system.</li> <li>Search room: To search for rooms by type and availability.</li> <li>Register or cancel an account: To add a new member or cancel the membership of an existing member.</li> <li>Book room: To book a room.</li> <li>Check-in: To let the guest check-in for their booking.</li> <li>Check-out: To track the end of the booking and the return of the room keys.</li> <li>Add room charge: To add a room service charge to the customer\u2019s bill.</li> <li>Update housekeeping log: To add or update the housekeeping entry of a room.</li> </ul> <p>Here is the use case diagram of our Hotel Management System:</p> <p></p> <p>Use Case Diagram for Hotel Management System</p>"},{"location":"case-studies/design-a-hotel-management-system/#class-diagram","title":"Class Diagram","text":"<p>Here are the main classes of our Hotel Management System:</p> <ul> <li>Hotel and HotelLocation: Our system will support multiple locations of a hotel.</li> <li>Room: The basic building block of the system. Every room will be uniquely identified by the room number. Each Room will have attributes like Room Style, Booking Price, etc.</li> <li>Account: We will have different types of accounts in the system: one will be a guest to search and book rooms, another will be a receptionist. Housekeeping will keep track of the housekeeping records of a room, and a Server will handle room service.</li> <li>RoomBooking: This class will be responsible for managing bookings for a room.</li> <li>Notification: Will take care of sending notifications to guests.</li> <li>RoomHouseKeeping: To keep track of all housekeeping records for rooms.</li> <li>RoomCharge: Encapsulates the details about different types of room services that guests have requested.</li> <li>Invoice: Contains different invoice-items for every charge against the room.</li> <li>RoomKey: Each room can be assigned an electronic key card. Keys will have a barcode and will be uniquely identified by a key-ID.</li> </ul> <p></p> <p>Class Diagram for Hotel Management System</p> <p></p> <p>UML for Hotel Management System</p>"},{"location":"case-studies/design-a-hotel-management-system/#activity-diagrams","title":"Activity Diagrams","text":"<p>Make a room booking: Any guest or receptionist can perform this activity. Here are the set of steps to book a room:</p> <p></p> <p>Activity Diagram for Hotel Management System Room Booking</p> <p>Check in: Guest will check in for their booking. The Receptionist can also perform this activity. Here are the steps:</p> <p></p> <p>Activity Diagram for Hotel Management System Check in</p> <p>Cancel a booking: Guest can cancel their booking. Receptionist can perform this activity. Here are the different steps of this activity:</p> <p></p> <p>Activity Diagram for Hotel Management System Cancel Booking</p>"},{"location":"case-studies/design-a-hotel-management-system/#code","title":"Code","text":"<p>Here is the high-level definition for the classes described above.</p> <p>Enums, data types, and constants: Here are the required enums, data types, and constants:</p> <pre><code>from enum import Enum\n\n\nclass RoomStyle(Enum):\n    STANDARD, DELUXE, FAMILY_SUITE, BUSINESS_SUITE = 1, 2, 3, 4\n\n\nclass RoomStatus(Enum):\n    AVAILABLE, RESERVED, OCCUPIED, NOT_AVAILABLE, BEING_SERVICED, OTHER = 1, 2, 3, 4, 5, 6\n\n\nclass BookingStatus(Enum):\n    REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CHECKED_OUT, CANCELLED, ABANDONED = 1, 2, 3, 4, 5, 6, 7\n\n\nclass AccountStatus(Enum):\n    ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED = 1, 2, 3, 4, 5\n\n\nclass AccountType(Enum):\n    MEMBER, GUEST, MANAGER, RECEPTIONIST = 1, 2, 3, 4\n\n\nclass PaymentStatus(Enum):\n    UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n\nclass Address:\n    def __init__(self, street, city, state, zip_code, country):\n        self.__street_address = street\n        self.__city = city\n        self.__state = state\n        self.__zip_code = zip_code\n        self.__country = country\n</code></pre> <p>Account, Person, Guest, Receptionist, and Server: These classes represent the different people that interact with our system:</p> <pre><code>from abc import ABC\nfrom .constants import *\n\n\n# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\nclass Account:\n    def __init__(self, id, password, status=AccountStatus.Active):\n        self.__id = id\n        self.__password = password\n        self.__status = status\n\n    def reset_password(self):\n        None\n\n\n# from abc import ABC, abstractmethod\nclass Person(ABC):\n    def __init__(self, name, address, email, phone, account):\n        self.__name = name\n        self.__address = address\n        self.__email = email\n        self.__phone = phone\n        self.__account = account\n\n\nclass Guest(Person):\n    def __init__(self):\n        self.__total_rooms_checked_in = 0\n\n    def get_bookings(self):\n        None\n\n\nclass Receptionist(Person):\n    def search_member(self, name):\n        None\n\n    def create_booking(self):\n        None\n\n\nclass Server(Person):\n    def add_room_charge(self, room, room_charge):\n        None\n</code></pre> <p>Hotel and HotelLocation: These classes represent the top-level classes of the system:</p> HotelLocation Class <pre><code>class HotelLocation:\n    def __init__(self, name, address):\n        self.__name = name\n        self.__location = address\n\n    def get_rooms(self):\n        None\n\n\nclass Hotel:\n    def __init__(self, name):\n        self.__name = name\n        self.__locations = []\n\n    def add_location(self, location):\n        None\n</code></pre> <p>Room, RoomKey, and RoomHouseKeeping: To encapsulate a room, room key, and housekeeping:</p> <pre><code>from datetime import datetime\nfrom abc import ABC\n\n\nclass Search(ABC):\n    def search(self, style, start_date, duration):\n        None\n\n\nclass Room(Search):\n    def __init__(self, room_number, room_style, status, price, is_smoking):\n        self.__room_number = room_number\n        self.__style = room_style\n        self.__status = status\n        self.__booking_price = price\n        self.__is_smoking = is_smoking\n\n        self.__keys = []\n        self.__house_keeping_log = []\n\n    def is_room_available(self):\n        None\n\n    def check_in(self):\n        None\n\n    def check_out(self):\n        None\n\n    def search(self, style, start_date, duration):\n        None\n\n\n# return all rooms with the given style and availability\n\n\nclass RoomKey:\n    def __init__(self, key_id, barcode, is_active, is_master):\n        self.__key_id = key_id\n        self.__barcode = barcode\n        self.__issued_at = datetime.date.today()\n        self.__active = is_active\n        self.__is_master = is_master\n\n    def assign_room(self, room):\n        None\n\n    def is_active(self):\n        None\n\n\nclass RoomHouseKeeping:\n    def __init__(self, description, duration, house_keeper):\n        self.__description = description\n        self.__start_datetime = datetime.date.today()\n        self.__duration = duration\n        self.__house_keeper = house_keeper\n\n    def add_house_keeping(self, room):\n        None\n</code></pre> <p>RoomBooking and RoomCharge: To encapsulate a booking and different charges against a booking:</p> <pre><code>from datetime import datetime\nfrom abc import ABC\n\n\nclass RoomBooking:\n    def __init__(self, reservation_number, start_date, duration_in_days, booking_status):\n        self.__reservation_number = reservation_number\n        self.__start_date = start_date\n        self.__duration_in_days = duration_in_days\n        self.__status = booking_status\n        self.__checkin = None\n        self.__checkout = None\n\n        self.__guest_id = 0\n        self.__room = None\n        self.__invoice = None\n        self.__notifications = []\n\n    def fetch_details(self, reservation_number):\n        None\n\n\n# from abc import ABC, abstractmethod\nclass RoomCharge(ABC):\n    def __init__(self):\n        self.__issue_at = datetime.date.today()\n\n    def add_invoice_item(self, invoice):\n        None\n\n\nclass Amenity(RoomCharge):\n    def __init__(self, name, description):\n        self.__name = name\n        self.__description = description\n\n\nclass RoomService(RoomCharge):\n    def __init__(self, is_chargeable, request_time):\n        self.__is_chargeable = is_chargeable\n        self.__request_time = request_time\n\n\nclass KitchenService(RoomCharge):\n    def __init__(self, description):\n        self.__description = description\n</code></pre>"},{"location":"case-studies/design-a-library-management-system/","title":"Design a Library Management System","text":""},{"location":"case-studies/design-a-library-management-system/#lets-design-a-library-management-system","title":"Let's design a Library Management System","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagrams</li> <li>Code</li> </ul> <p>A Library Management System is a software built to handle the primary housekeeping functions of a library. Libraries rely on library management systems to manage asset collections as well as relationships with their members. Library management systems help libraries keep track of the books and their checkouts, as well as members\u2019 subscriptions and profiles.</p> <p>Library management systems also involve maintaining the database for entering new books and recording books that have been borrowed with their respective due dates.</p> <p></p> <p>Library Management System</p>"},{"location":"case-studies/design-a-library-management-system/#system-requirements","title":"System Requirements","text":"<p>Note</p> <p>Always clarify requirements at the beginning of the interview. Be sure to ask questions to find the exact scope of the system that the interviewer has in mind.</p> <p>We will focus on the following set of requirements while designing the Library Management System:</p> <ol> <li>Any library member should be able to search books by their title, author, subject category as well by the publication date.</li> <li>Each book will have a unique identification number and other details including a rack number which will help to physically locate the book.</li> <li>There could be more than one copy of a book, and library members should be able to check-out and reserve any copy. We will call each copy of a book, a book item.</li> <li>The system should be able to retrieve information like who took a particular book or what are the books checked-out by a specific library member.</li> <li>There should be a maximum limit (5) on how many books a member can check-out.</li> <li>There should be a maximum limit (10) on how many days a member can keep a book.</li> <li>The system should be able to collect fines for books returned after the due date.</li> <li>Members should be able to reserve books that are not currently available.</li> <li>The system should be able to send notifications whenever the reserved books become available, as well as when the book is not returned within the due date.</li> <li>Each book and member card will have a unique barcode. The system will be able to read barcodes from books and members\u2019 library cards.</li> </ol>"},{"location":"case-studies/design-a-library-management-system/#use-case-diagram","title":"Use Case Diagram","text":"<p>We have three main actors in our system:</p> <ul> <li>Librarian: Mainly responsible for adding and modifying books, book items, and users. The Librarian can also issue, reserve, and return book items.</li> <li>Member: All members can search the catalog, as well as check-out, reserve, renew, and return a book.</li> <li>System: Mainly responsible for sending notifications for overdue books, canceled reservations, etc.</li> </ul> <p>Here are the top use cases of the Library Management System:</p> <ul> <li>Add/Remove/Edit book: To add, remove or modify a book or book item.</li> <li>Search catalog: To search books by title, author, subject or publication date.</li> <li>Register new account/cancel membership: To add a new member or cancel the membership of an existing member.</li> <li>Check-out book: To borrow a book from the library.</li> <li>Reserve book: To reserve a book which is not currently available.</li> <li>Renew a book: To reborrow an already checked-out book.</li> <li>Return a book: To return a book to the library which was issued to a member.</li> </ul> <p>Here is the use case diagram of our Library Management System:</p> <p></p> <p>Use Case Diagram for Library Management System</p>"},{"location":"case-studies/design-a-library-management-system/#class-diagram","title":"Class Diagram","text":"<p>Here are the main classes of our Library Management System:</p> <ul> <li>Library: The central part of the organization for which this software has been designed. It has attributes like \u2018Name\u2019 to distinguish it from any other libraries and \u2018Address\u2019 to describe its location.</li> <li>Book: The basic building block of the system. Every book will have ISBN, Title, Subject, Publishers, etc.</li> <li>BookItem: Any book can have multiple copies, each copy will be considered a book item in our system. Each book item will have a unique barcode.</li> <li>Account: We will have two types of accounts in the system, one will be a general member, and the other will be a librarian.</li> <li>LibraryCard: Each library user will be issued a library card, which will be used to identify users while issuing or returning books.</li> <li>BookReservation: Responsible for managing reservations against book items.</li> <li>BookLending: Manage the checking-out of book items.</li> <li>Catalog: Catalogs contain list of books sorted on certain criteria. Our system will support searching through four catalogs: Title, Author, Subject, and Publish-date.</li> <li>Fine: This class will be responsible for calculating and collecting fines from library members.</li> <li>Author: This class will encapsulate a book author.</li> <li>Rack: Books will be placed on racks. Each rack will be identified by a rack number and will have a location identifier to describe the physical location of the rack in the library.</li> <li>Notification: This class will take care of sending notifications to library members.</li> </ul> <p></p> <p>Class Diagram for Library Management System</p> <p></p> <p>UML for Library Management System</p>"},{"location":"case-studies/design-a-library-management-system/#activity-diagrams","title":"Activity Diagrams","text":"<p>Check-out a book: Any library member or librarian can perform this activity. Here are the set of steps to check-out a book:</p> <p></p> <p>Activity Diagram for Library Management System Check-out Book</p> <p>Return a book: Any library member or librarian can perform this activity. The system will collect fines from members if they return books after the due date. Here are the steps for returning a book:</p> <p></p> <p>Activity Diagram for Library Management System Return Book</p> <p>Renew a book: While renewing (re-issuing) a book, the system will check for fines and see if any other member has not reserved the same book, in that case the book item cannot be renewed. Here are the different steps for renewing a book:</p> <p></p> <p>Activity Diagram for Library Management System Renew Book</p>"},{"location":"case-studies/design-a-library-management-system/#code","title":"Code","text":"<p>Here is the code for the use cases mentioned above: 1) Check-out a book, 2) Return a book, and 3) Renew a book.</p> <p>Note: This code only focuses on the design part of the use cases. Since you are not required to write a fully executable code in an interview, you can assume parts of the code to interact with the database, payment system, etc.</p> <p>Enums and Constants: Here are the required enums, data types, and constants:</p> <p>Code Snippet: <pre><code>from abc import ABC\nfrom enum import Enum\n\n\nclass BookFormat(Enum):\n    HARDCOVER, PAPERBACK, AUDIO_BOOK, EBOOK, NEWSPAPER, MAGAZINE, JOURNAL = 1, 2, 3, 4, 5, 6, 7\n\n\nclass BookStatus(Enum):\n    AVAILABLE, RESERVED, LOANED, LOST = 1, 2, 3, 4\n\n\nclass ReservationStatus(Enum):\n    WAITING, PENDING, CANCELED, NONE = 1, 2, 3, 4\n\n\nclass AccountStatus(Enum):\n    ACTIVE, CLOSED, CANCELED, BLACKLISTED, NONE = 1, 2, 3, 4, 5\n\n\nclass Address:\n    def __init__(self, street, city, state, zip_code, country):\n        self.__street_address = street\n        self.__city = city\n        self.__state = state\n        self.__zip_code = zip_code\n        self.__country = country\n\n\nclass Person(ABC):\n    def __init__(self, name, address, email, phone):\n        self.__name = name\n        self.__address = address\n        self.__email = email\n        self.__phone = phone\n\n\nclass Constants:\n    def __init__(self):\n          self.MAX_BOOKS_ISSUED_TO_A_USER = 5\n          self.MAX_LENDING_DAYS = 10\n</code></pre></p> <p>Account, Member, and Librarian: These classes represent various people that interact with our system:</p> <p>Code Snippet: <pre><code># For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nfrom abc import ABC\nfrom datetime import datetime\n\nfrom .constants import *\nfrom .models import *\n\n\nclass Account(ABC):\n    def __init__(self, id, password, person, status=AccountStatus.Active):\n        self.__id = id\n        self.__password = password\n        self.__status = status\n        self.__person = person\n\n    def reset_password(self):\n        None\n\n\nclass Librarian(Account):\n    def __init__(self, id, password, person, status=AccountStatus.Active):\n        super().__init__(id, password, person, status)\n\n    def add_book_item(self, book_item):\n        None\n\n    def block_member(self, member):\n        None\n\n    def un_block_member(self, member):\n        None\n\n\nclass Member(Account):\n    def __init__(self, id, password, person, status=AccountStatus.Active):\n        super().__init__(id, password, person, status)\n        self.__date_of_membership = datetime.date.today()\n        self.__total_books_checkedout = 0\n\n    def get_total_books_checkedout(self):\n        return self.__total_books_checkedout\n\n    def reserve_book_item(self, book_item):\n        None\n\n    def increment_total_books_checkedout(self):\n        None\n\n    def renew_book_item(self, book_item):\n        None\n\n    def checkout_book_item(self, book_item):\n        if self.get_total_books_checked_out() &gt;= Constants.MAX_BOOKS_ISSUED_TO_A_USER:\n            print(\"The user has already checked-out maximum number of books\")\n            return False\n        book_reservation = BookReservation.fetch_reservation_details(book_item.get_barcode())\n        if book_reservation != None and book_reservation.get_member_id() != self.get_id():\n            # book item has a pending reservation from another user\n            print(\"self book is reserved by another member\")\n            return False\n        elif book_reservation != None:\n            # book item has a pending reservation from the give member, update it\n            book_reservation.update_status(ReservationStatus.COMPLETED)\n\n        if not book_item.checkout(self.get_id()):\n            return False\n\n        self.increment_total_books_checkedout()\n        return True\n\n    def check_for_fine(self, book_item_barcode):\n        book_lending = BookLending.fetch_lending_details(book_item_barcode)\n        due_date = book_lending.get_due_date()\n        today = datetime.date.today()\n        # check if the book has been returned within the due date\n        if today &gt; due_date:\n            diff = today - due_date\n            diff_days = diff.days\n            Fine.collect_fine(self.get_member_id(), diff_days)\n\n    def return_book_item(self, book_item):\n        self.check_for_fine(book_item.get_barcode())\n        book_reservation = BookReservation.fetch_reservation_details(book_item.get_barcode())\n        if book_reservation != None:\n            # book item has a pending reservation\n            book_item.update_book_item_status(BookStatus.RESERVED)\n            book_reservation.send_book_available_notification()\n            book_item.update_book_item_status(BookStatus.AVAILABLE)\n\n    def renew_book_item(self, book_item):\n        self.check_for_fine(book_item.get_barcode())\n        book_reservation = BookReservation.fetch_reservation_details(\n        book_item.get_barcode())\n        # check if self book item has a pending reservation from another member\n        if book_reservation != None and book_reservation.get_member_id() != self.get_member_id():\n            print(\"self book is reserved by another member\")\n            self.decrement_total_books_checkedout()\n            book_item.update_book_item_state(BookStatus.RESERVED)\n            book_reservation.send_book_available_notification()\n            return False\n        elif book_reservation != None:\n            # book item has a pending reservation from self member\n            book_reservation.update_status(ReservationStatus.COMPLETED)\n\n        BookLending.lend_book(book_item.get_bar_code(), self.get_member_id())\n        book_item.update_due_date(datetime.datetime.now().AddDays(Constants.MAX_LENDING_DAYS))\n        return True\n</code></pre></p> <p>BookReservation, BookLending, and Fine: These classes represent a book reservation, lending, and fine collection, respectively.</p> <p>Code Snippet:</p> BookReservation Class <pre><code>class BookReservation:\n    def __init__(self, creation_date, status, book_item_barcode, member_id):\n        self.__creation_date = creation_date\n        self.__status = status\n        self.__book_item_barcode = book_item_barcode\n        self.__member_id = member_id\n\n    def fetch_reservation_details(self, barcode):\n        None\n\n\nclass BookLending:\n    def __init__(self, creation_date, due_date, book_item_barcode, member_id):\n        self.__creation_date = creation_date\n        self.__due_date = due_date\n        self.__return_date = None\n        self.__book_item_barcode = book_item_barcode\n        self.__member_id = member_id\n\n    def lend_book(self, barcode, member_id):\n        None\n\n    def fetch_lending_details(self, barcode):\n        None\n\n\nclass Fine:\n    def __init__(self, creation_date, book_item_barcode, member_id):\n        self.__creation_date = creation_date\n        self.__book_item_barcode = book_item_barcode\n        self.__member_id = member_id\n\n    def collect_fine(self, member_id, days):\n        None\n</code></pre> <p>BookItem: Encapsulating a book item, this class will be responsible for processing the reservation, return, and renewal of a book item.</p> <p>Code Snippet: <pre><code>from abc import ABC\nfrom .constants import *\n\n\nclass Book(ABC):\n    def __init__(self, ISBN, title, subject, publisher, language, number_of_pages):\n        self.__ISBN = ISBN\n        self.__title = title\n        self.__subject = subject\n        self.__publisher = publisher\n        self.__language = language\n        self.__number_of_pages = number_of_pages\n        self.__authors = []\n\n\nclass BookItem(Book):\n    def __init__(self, barcode, is_reference_only, borrowed, due_date, price, book_format, status,\n                 date_of_purchase, publication_date, placed_at):\n        self.__barcode = barcode\n        self.__is_reference_only = is_reference_only\n        self.__borrowed = borrowed\n        self.__due_date = due_date\n        self.__price = price\n        self.__format = book_format\n        self.__status = status\n        self.__date_of_purchase = date_of_purchase\n        self.__publication_date = publication_date\n        self.__placed_at = placed_at\n\n    def checkout(self, member_id):\n        if self.get_is_reference_only():\n            print(\"self book is Reference only and can't be issued\")\n            return False\n        if not BookLending.lend_book(self.get_bar_code(), member_id):\n            return False\n        self.update_book_item_status(BookStatus.LOANED)\n        return True\n\n\nclass Rack:\n    def __init__(self, number, location_identifier):\n        self.__number = number\n        self.__location_identifier = location_identifier\n</code></pre></p> <p>Search interface and Catalog: The Catalog class will implement the Search interface to facilitate searching of books.</p> <p>Code Snippet: <pre><code>from abc import ABC\n\n\nclass Search(ABC):\n    def search_by_title(self, title):\n        None\n\n    def search_by_author(self, author):\n        None\n\n    def search_by_subject(self, subject):\n        None\n\n    def search_by_pub_date(self, publish_date):\n        None\n\n\nclass Catalog(Search):\n    def __init__(self):\n        self.__book_titles = {}\n        self.__book_authors = {}\n        self.__book_subjects = {}\n        self.__book_publication_dates = {}\n\n    def search_by_title(self, query):\n        # return all books containing the string query in their title.\n        return self.__book_titles.get(query)\n\n    def search_by_author(self, query):\n        # return all books containing the string query in their author's name.\n        return self.__book_authors.get(query)\n</code></pre></p>"},{"location":"case-studies/design-a-movie-ticket-booking-system/","title":"Design a Movie Ticket Booking System","text":""},{"location":"case-studies/design-a-movie-ticket-booking-system/#lets-design-movie-ticket-booking-system","title":"Let's design Movie Ticket Booking System","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagrams</li> <li>Code</li> <li>Concurrency</li> </ul> <p>An online movie ticket booking system facilitates the purchasing of movie tickets to its customers. E-ticketing systems allow customers to browse through movies currently playing and book seats, anywhere and anytime.</p> <p></p> <p>Movie Ticket Booking System</p>"},{"location":"case-studies/design-a-movie-ticket-booking-system/#system-requirements","title":"System Requirements","text":"<p>Our ticket booking service should meet the following requirements:</p> <ol> <li>It should be able to list the cities where affiliate cinemas are located.</li> <li>Each cinema can have multiple halls and each hall can run one movie show at a time.</li> <li>Each Movie will have multiple shows.</li> <li>Customers should be able to search movies by their title, language, genre, release date, and city name.</li> <li>Once the customer selects a movie, the service should display the cinemas running that movie and its available shows.</li> <li>The customer should be able to select a show at a particular cinema and book their tickets.</li> <li>The service should show the customer the seating arrangement of the cinema hall. The customer should be able to select multiple seats according to their preference.</li> <li>The customer should be able to distinguish between available seats and booked ones.</li> <li>The system should send notifications whenever there is a new movie, as well as when a booking is made or canceled.</li> <li>Customers of our system should be able to pay with credit cards or cash.</li> <li>The system should ensure that no two customers can reserve the same seat.</li> <li>Customers should be able to add a discount coupon to their payment.</li> </ol>"},{"location":"case-studies/design-a-movie-ticket-booking-system/#use-case-diagram","title":"Use Case Diagram","text":"<p>We have five main Actors in our system:</p> <ul> <li>Admin: Responsible for adding new movies and their shows, canceling any movie or show, blocking/unblocking customers, etc.</li> <li>FrontDeskOfficer: Can book/cancel tickets.</li> <li>Customer: Can view movie schedules, book, and cancel tickets.</li> <li>Guest: All guests can search movies but to book seats they have to become a registered member.</li> <li>System: Mainly responsible for sending notifications for new movies, bookings, cancellations, etc.</li> </ul> <p>Here are the top use cases of the Movie Ticket Booking System:</p> <ul> <li>Search movies: To search movies by title, genre, language, release date, and city name.</li> <li>Create/Modify/View booking: To book a movie show ticket, cancel it or view details about the show.</li> <li>Make payment for booking: To pay for the booking.</li> <li>Add a coupon to the payment: To add a discount coupon to the payment.</li> <li>Assign Seat: Customers will be shown a seat map to let them select seats for their booking.</li> <li>Refund payment: Upon cancellation, customers will be refunded the payment amount as long as the cancellation occurs within the allowed time frame.</li> </ul> <p>Here is the use case diagram of Movie Ticket Booking System:</p> <p></p> <p>Use Case Diagram for Movie Ticket Booking System</p>"},{"location":"case-studies/design-a-movie-ticket-booking-system/#class-diagram","title":"Class Diagram","text":"<p>Here are the main classes of the Movie Ticket Booking System:</p> <ul> <li>Account: Admin will be able to add/remove movies and shows, as well as block/unblock accounts. Customers can search for movies and make bookings for shows. FrontDeskOffice can book tickets for movie shows.</li> <li>Guest: Guests can search and view movies descriptions. To make a booking for a show they have to become a registered member.</li> <li>Cinema: The main part of the organization for which this software has been designed. It has attributes like \u2018name\u2019 to distinguish it from other cinemas.</li> <li>CinemaHall: Each cinema will have multiple halls containing multiple seats.</li> <li>City: Each city can have multiple cinemas.</li> <li>Movie: The main entity of the system. Movies have attributes like title, description, language, genre, release date, city name, etc.</li> <li>Show: Each movie can have many shows; each show will be played in a cinema hall.</li> <li>CinemaHallSeat: Each cinema hall will have many seats.</li> <li>ShowSeat: Each ShowSeat will correspond to a movie Show and a CinemaHallSeat. Customers will make a booking against a ShowSeat.</li> <li>Booking: A booking is against a movie show and has attributes like a unique booking number, number of seats, and status.</li> <li>Payment: Responsible for collecting payments from customers.</li> <li>Notification: Will take care of sending notifications to customers.</li> </ul> <p></p> <p>Class Diagram for Movie Ticket Booking System</p> <p></p> <p>UML for Movie Ticket Booking System</p>"},{"location":"case-studies/design-a-movie-ticket-booking-system/#activity-diagrams","title":"Activity Diagrams","text":"<p>Make a booking: Any customer can perform this activity. Here are the steps to book a ticket for a show:</p> <p></p> <p>Activity Diagram for Movie Ticket Booking System Make Booking</p> <p>Cancel a booking: Customer can cancel their bookings. Here are the steps to cancel a booking:</p> <p></p> <p>Activity Diagram for Movie Ticket Booking System Cancel Booking</p>"},{"location":"case-studies/design-a-movie-ticket-booking-system/#code","title":"Code","text":"<p>Here are the high-level definitions for the classes described above.</p> <p>Enums, data types, and constants: Here are the required enums, data types, and constants:</p> <pre><code>from enum import Enum\n\n\nclass BookingStatus(Enum):\n    REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CANCELED, ABANDONED = 1, 2, 3, 4, 5, 6\n\n\nclass SeatType(Enum):\n    REGULAR, PREMIUM, ACCESSIBLE, SHIPPED, EMERGENCY_EXIT, OTHER = 1, 2, 3, 4, 5, 6\n\n\nclass AccountStatus(Enum):\n    ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN = 1, 2, 3, 4, 5, 6\n\n\nclass PaymentStatus(Enum):\n    UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n\nclass Address:\n    def __init__(self, street, city, state, zip_code, country):\n        self.__street_address = street\n        self.__city = city\n        self.__state = state\n        self.__zip_code = zip_code\n        self.__country = country\n</code></pre> <p>Account, Customer, Admin, FrontDeskOfficer, and Guest: These classes represent the different people that interact with our system:</p> <pre><code>from abc import ABC\nfrom .constants import AccountStatus\n\n\n# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nclass Account:\n    def __init__(self, id, password, status=AccountStatus.Active):\n        self.__id = id\n        self.__password = password\n        self.__status = status\n\n    def reset_password(self):\n        None\n\n\n# from abc import ABC, abstractmethod\nclass Person(ABC):\n    def __init__(self, name, address, email, phone, account):\n        self.__name = name\n        self.__address = address\n        self.__email = email\n        self.__phone = phone\n        self.__account = account\n\n\nclass Customer(Person):\n    def make_booking(self, booking):\n        None\n\n    def get_bookings(self):\n        None\n\n\nclass Admin(Person):\n    def add_movie(self, movie):\n        None\n\n    def add_show(self, show):\n        None\n\n    def block_user(self, customer):\n        None\n\n\nclass FrontDeskOfficer(Person):\n    def create_booking(self, booking):\n        None\n\n\nclass Guest:\n    def register_account(self):\n        None\n</code></pre> <p>Show and Movie: A movie will have many shows:</p> <pre><code>from datetime import datetime\n\n\nclass Show:\n    def __init__(self, id, played_at, movie, start_time, end_time):\n        self.__show_id = id\n        self.__created_on = datetime.date.today()\n        self.__start_time = start_time\n        self.__end_time = end_time\n        self.__played_at = played_at\n        self.__movie = movie\n\n\nclass Movie:\n    def __init__(self, title, description, duration_in_mins, language, release_date, country, genre, added_by):\n        self.__title = title\n        self.__description = description\n        self.__duration_in_mins = duration_in_mins\n        self.__language = language\n        self.__release_date = release_date\n        self.__country = country\n        self.__genre = genre\n        self.__movie_added_by = added_by\n\n        self.__shows = []\n\n    def get_shows(self):\n        None\n</code></pre> <p>Booking, ShowSeat, and Payment: Customers will reserve seats with a booking and make a payment:</p> <pre><code>from datetime import datetime\nfrom .cinema import CinemaHallSeat\n\n\nclass Booking:\n    def __init__(self, booking_number, number_of_seats, status, show, show_seats, payment):\n        self.__booking_number = booking_number\n        self.__number_of_seats = number_of_seats\n        self.__created_on = datetime.date.today()\n        self.__status = status\n        self.__show = show\n        self.__seats = show_seats\n        self.__payment = payment\n\n    def make_payment(self, payment):\n        None\n\n    def cancel(self):\n        None\n\n    def assign_seats(self, seats):\n        None\n\n\nclass ShowSeat(CinemaHallSeat):\n    def __init__(self, id, is_reserved, price):\n        self.__show_seat_id = id\n        self.__is_reserved = is_reserved\n        self.__price = price\n\n\nclass Payment:\n    def __init__(self, amount, transaction_id, payment_status):\n        self.__amount = amount\n        self.__created_on = datetime.date.today()\n        self.__transaction_id = transaction_id\n        self.__status = payment_status\n</code></pre> <p>City, Cinema, CinemaHall and CinemaHallSeat: Each city can have many cinemas and each cinema can have many cinema halls:</p> City Class <pre><code>class City:\n    def __init__(self, name, state, zip_code):\n        self.__name = name\n        self.__state = state\n        self.__zip_code = zip_code\n\n\nclass Cinema:\n    def __init__(self, name, total_cinema_halls, address, halls):\n        self.__name = name\n        self.__total_cinema_halls = total_cinema_halls\n        self.__location = address\n\n        self.__halls = halls\n\n\nclass CinemaHall:\n    def __init__(self, name, total_seats, seats, shows):\n        self.__name = name\n        self.__total_seats = total_seats\n\n        self.__seats = seats\n        self.__shows = shows\n\n\nclass CinemaHallSeat:\n    def __init__(self, id, seat_type):\n        self.__hall_seat_id = id\n        self.__seat_type = seat_type\n</code></pre> <p>Search interface and Catalog: Catalog will implement Search to facilitate searching of products.</p> <pre><code>from abc import ABC\n\n\nclass Search(ABC):\n    def search_by_title(self, title):\n        None\n\n    def search_by_language(self, language):\n        None\n\n    def search_by_genre(self, genre):\n        None\n\n    def search_by_release_date(self, rel_date):\n        None\n\n    def search_by_city(self, city_name):\n        None\n\n\nclass Catalog(Search):\n    def __init__(self):\n        self.__movie_titles = {}\n        self.__movie_languages = {}\n        self.__movie_genres = {}\n        self.__movie_release_dates = {}\n        self.__movie_cities = {}\n\n        def search_by_title(self, title):\n            return self.__movie_titles.get(title)\n\n        def search_by_language(self, language):\n            return self.__movie_languages.get(language)\n\n        # ...\n\n        def search_by_city(self, city_name):\n            return self.__movie_cities.get(city_name)\n</code></pre>"},{"location":"case-studies/design-a-movie-ticket-booking-system/#concurrency","title":"Concurrency","text":"<p>How to handle concurrency; such that no two users are able to book the same seat?</p> <p>We can use transactions in SQL databases to avoid any clashes. For example, if we are using SQL server we can utilize Transaction Isolation Levels to lock the rows before we update them. Note: within a transaction, if we read rows we get a write-lock on them so that they can\u2019t be updated by anyone else. Here is the sample code:</p> <pre><code>SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;\n\nBEGIN TRANSACTION;\n\n    -- Suppose we intend to reserve three seats (IDs: 54, 55, 56) for ShowID=99 \n    Select * From ShowSeat where ShowID=99 &amp;&amp; ShowSeatID in (54, 55, 56) &amp;&amp; isReserved=0 \n\n    -- if the number of rows returned by the above statement is NOT three, we can return failure to the user.\n    update ShowSeat table...\n    update Booking table ...\n\nCOMMIT TRANSACTION;\n</code></pre> <p>\u2018Serializable\u2019 is the highest isolation level and guarantees safety from Dirty, Nonrepeatable, and Phantoms reads.</p> <p>Once the above database transaction is successful, we can safely assume that the reservation has been marked successfully and no two customers will be able to reserve the same seat.</p> <p>Read JDBC Transaction Isolation Levels for details.</p>"},{"location":"case-studies/design-a-parking-lot/","title":"Design a Parking Lot","text":""},{"location":"case-studies/design-a-parking-lot/#lets-make-an-object-oriented-design-for-a-multi-floor-parking-lot","title":"Let's make an object-oriented design for a multi-floor Parking Lot","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagram</li> <li>Code</li> </ul> <p>A parking lot or car park is a dedicated cleared area that is intended for parking vehicles. In most countries where cars are a major mode of transportation, parking lots are a feature of every city and suburban area. Shopping malls, sports stadiums, megachurches, and similar venues often feature parking lots over large areas.</p> <p></p> <p>Parking Lot</p>"},{"location":"case-studies/design-a-parking-lot/#system-requirements","title":"System Requirements","text":"<p>We will focus on the following set of requirements while designing the parking lot:</p> <ol> <li>The parking lot should have multiple floors where customers can park their cars.</li> <li>The parking lot should have multiple entry and exit points.</li> <li>Customers can collect a parking ticket from the entry points and can pay the parking fee at the exit points on their way out.</li> <li>Customers can pay the tickets at the automated exit panel or to the parking attendant.</li> <li>Customers can pay via both cash and credit cards.</li> <li>Customers should also be able to pay the parking fee at the customer\u2019s info portal on each floor. If the customer has paid at the info portal, they don\u2019t have to pay at the exit.</li> <li>The system should not allow more vehicles than the maximum capacity of the parking lot. If the parking is full, the system should be able to show a message at the entrance panel and on the parking display board on the ground floor.</li> <li>Each parking floor will have many parking spots. The system should support multiple types of parking spots such as Compact, Large, Handicapped, Motorcycle, etc.</li> <li>The Parking lot should have some parking spots specified for electric cars. These spots should have an electric panel through which customers can pay and charge their vehicles.</li> <li>The system should support parking for different types of vehicles like car, truck, van, motorcycle, etc.</li> <li>Each parking floor should have a display board showing any free parking spot for each spot type.</li> <li>The system should support a per-hour parking fee model. For example, customers have to pay $4 for the first hour, $3.5 for the second and third hours, and $2.5 for all the remaining hours.</li> </ol>"},{"location":"case-studies/design-a-parking-lot/#use-case-diagram","title":"Use Case Diagram","text":"<p>Here are the main Actors in our system:</p> <ul> <li>Admin: Mainly responsible for adding and modifying parking floors, parking spots, entrance, and exit panels, adding/removing parking attendants, etc.</li> <li>Customer: All customers can get a parking ticket and pay for it.</li> <li>Parking Attendant: Parking attendants can do all the activities on the customer\u2019s behalf, and can take cash for ticket payment.</li> <li>System: To display messages on different info panels, as well as assigning and removing a vehicle from a parking spot.</li> </ul> <p>Here are the top use cases for Parking Lot:</p> <ul> <li>Add/Remove/Edit parking floor: To add, remove or modify a parking floor from the system. Each floor can have its own display board to show free parking spots.</li> <li>Add/Remove/Edit parking spot: To add, remove or modify a parking spot on a parking floor.</li> <li>Add/Remove a parking attendant: To add or remove a parking attendant from the system.</li> <li>Take ticket: To provide customers with a new parking ticket when entering the parking lot.</li> <li>Scan ticket: To scan a ticket to find out the total charge.</li> <li>Credit card payment: To pay the ticket fee with credit card.</li> <li>Cash payment: To pay the parking ticket through cash.</li> <li>Add/Modify parking rate: To allow admin to add or modify the hourly parking rate.</li> </ul> <p>Here is the use case diagram of our Parking Lot:</p> <p></p> <p>Use Case Diagram for Parking Lot</p>"},{"location":"case-studies/design-a-parking-lot/#class-diagram","title":"Class Diagram","text":"<p>Here are the main classes of our Parking Lot System:</p> <ul> <li>ParkingLot: The central part of the organization for which this software has been designed. It has attributes like \u2018Name\u2019 to distinguish it from any other parking lots and \u2018Address\u2019 to define its location.</li> <li>ParkingFloor: The parking lot will have many parking floors.</li> <li>ParkingSpot: Each parking floor will have many parking spots. Our system will support different parking spots 1) Handicapped, 2) Compact, 3) Large, 4) Motorcycle, and 5) Electric.</li> <li>Account: We will have two types of accounts in the system: one for an Admin, and the other for a parking attendant.</li> <li>Parking ticket: This class will encapsulate a parking ticket. Customers will take a ticket when they enter the parking lot.</li> <li>Vehicle: Vehicles will be parked in the parking spots. Our system will support different types of vehicles 1) Car, 2) Truck, 3) Electric, 4) Van and 5) Motorcycle.</li> <li>EntrancePanel and ExitPanel: EntrancePanel will print tickets, and ExitPanel will facilitate payment of the ticket fee.</li> <li>Payment: This class will be responsible for making payments. The system will support credit card and cash transactions.</li> <li>ParkingRate: This class will keep track of the hourly parking rates. It will specify a dollar amount for each hour. For example, for a two hour parking ticket, this class will define the cost for the first and the second hour.</li> <li>ParkingDisplayBoard: Each parking floor will have a display board to show available parking spots for each spot type. This class will be responsible for displaying the latest availability of free parking spots to the customers.</li> <li>ParkingAttendantPortal: This class will encapsulate all the operations that an attendant can perform, like scanning tickets and processing payments.</li> <li>CustomerInfoPortal: This class will encapsulate the info portal that customers use to pay for the parking ticket. Once paid, the info portal will update the ticket to keep track of the payment.</li> <li>ElectricPanel: Customers will use the electric panels to pay and charge their electric vehicles.</li> </ul> <p></p> <p>Class Diagram for Parking Lot</p> <p></p> <p>UML for Parking Lot</p>"},{"location":"case-studies/design-a-parking-lot/#activity-diagram","title":"Activity Diagram","text":"<p>Customer paying for parking ticket: Any customer can perform this activity. Here are the set of steps:</p> <p></p> <p>Activity Diagram for Parking Lot Parking Ticket</p>"},{"location":"case-studies/design-a-parking-lot/#code","title":"Code","text":"<p>Following is the skeleton code for our parking lot system:</p> <p>Enums and Constants: Here are the required enums, data types, and constants:</p> <pre><code>from enum import Enum\n\n\nclass VehicleType(Enum):\n    CAR, TRUCK, ELECTRIC, VAN, MOTORBIKE = 1, 2, 3, 4, 5\n\n\nclass ParkingSpotType(Enum):\n    HANDICAPPED, COMPACT, LARGE, MOTORBIKE, ELECTRIC = 1, 2, 3, 4, 5\n\n\nclass AccountStatus(Enum):\n    ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN = 1, 2, 3, 4, 5, 6\n\n\nclass ParkingTicketStatus(Enum):\n    ACTIVE, PAID, LOST = 1, 2, 3\n\n\nclass Address:\n    def __init__(self, street, city, state, zip_code, country):\n        self.__street_address = street\n        self.__city = city\n        self.__state = state\n        self.__zip_code = zip_code\n        self.__country = country\n\n\nclass Person():\n    def __init__(self, name, address, email, phone):\n        self.__name = name\n        self.__address = address\n        self.__email = email\n        self.__phone = phone\n</code></pre> <p>Account, Admin, and ParkingAttendant: These classes represent various people that interact with our system:</p> <pre><code>from .constants import *\n\n\nclass Account:\n    def __init__(self, user_name, password, person, status=AccountStatus.Active):\n        self.__user_name = user_name\n        self.__password = password\n        self.__person = person\n        self.__status = status\n\n    def reset_password(self):\n        None\n\n\nclass Admin(Account):\n    def __init__(self, user_name, password, person, status=AccountStatus.Active):\n        super().__init__(user_name, password, person, status)\n\n    def add_parking_floor(self, floor):\n        None\n\n    def add_parking_spot(self, floor_name, spot):\n        None\n\n    def add_parking_display_board(self, floor_name, display_board):\n        None\n\n    def add_customer_info_panel(self, floor_name, info_panel):\n        None\n\n    def add_entrance_panel(self, entrance_panel):\n        None\n\n    def add_exit_panel(self, exit_panel):\n        None\n\n\nclass ParkingAttendant(Account):\n    def __init__(self, user_name, password, person, status=AccountStatus.Active):\n        super().__init__(user_name, password, person, status)\n\n    def process_ticket(self, ticket_number):\n        None\n</code></pre> <p>ParkingSpot: Here is the definition of ParkingSpot and all of its children classes:</p> <pre><code>from abc import ABC\nfrom .constants import  *\n\n\nclass ParkingSpot(ABC):\n    def __init__(self, number, parking_spot_type):\n        self.__number = number\n        self.__free = True\n        self.__vehicle = None\n        self.__parking_spot_type = parking_spot_type\n\n    def is_free(self):\n        return self.__free\n\n    def assign_vehicle(self, vehicle):\n        self.__vehicle = vehicle\n        self.__free = False\n\n    def remove_vehicle(self):\n        self.__vehicle = None\n        self.free = True\n\n\nclass HandicappedSpot(ParkingSpot):\n    def __init__(self, number):\n        super().__init__(number, ParkingSpotType.HANDICAPPED)\n\n\nclass CompactSpot(ParkingSpot):\n    def __init__(self, number):\n        super().__init__(number, ParkingSpotType.COMPACT)\n\n\nclass LargeSpot(ParkingSpot):\n    def __init__(self, number):\n        super().__init__(number, ParkingSpotType.LARGE)\n\n\nclass MotorbikeSpot(ParkingSpot):\n    def __init__(self, number):\n        super().__init__(number, ParkingSpotType.MOTORBIKE)\n\n\nclass ElectricSpot(ParkingSpot):\n    def __init__(self, number):\n        super().__init__(number, ParkingSpotType.ELECTRIC)\n</code></pre> <p>ParkingFloor: This class encapsulates a parking floor:</p> <pre><code>from .constants import  *\nfrom .parking_display_board import *\n\n\nclass ParkingFloor:\n    def __init__(self, name):\n        self.__name = name\n        self.__handicapped_spots = {}\n        self.__compact_spots = {}\n        self.__large_spots = {}\n        self.__motorbike_spots = {}\n        self.__electric_spots = {}\n        self.__info_portals = {}\n        self.__free_handicapped_spot_count = {'free_spot': 0}\n        self.__free_compact_spot_count = {'free_spot': 0}\n        self.__free_large_spot_count = {'free_spot': 0}\n        self.__free_motorbike_spot_count = {'free_spot': 0}\n        self.__free_electric_spot_count = {'free_spot': 0}\n        self.__display_board = ParkingDisplayBoard()\n\n    def add_parking_spot(self, spot):\n        switcher = {\n            ParkingSpotType.HANDICAPPED: self.__handicapped_spots.put(spot.get_number(), spot),\n            ParkingSpotType.COMPACT: self.__compact_spots.put(spot.get_number(), spot),\n            ParkingSpotType.LARGE: self.__large_spots.put(spot.get_number(), spot),\n            ParkingSpotType.MOTORBIKE: self.__motorbike_spots.put(spot.get_number(), spot),\n            ParkingSpotType.ELECTRIC: self.__electric_spots.put(spot.get_number(), spot),\n        }\n        switcher.get(spot.get_type(), 'Wrong parking spot type')\n\n    def assign_vehicleToSpot(self, vehicle, spot):\n        spot.assign_vehicle(vehicle)\n        switcher = {\n            ParkingSpotType.HANDICAPPED: self.update_display_board_for_handicapped(spot),\n            ParkingSpotType.COMPACT: self.update_display_board_for_compact(spot),\n            ParkingSpotType.LARGE: self.update_display_board_for_large(spot),\n            ParkingSpotType.MOTORBIKE: self.update_display_board_for_motorbike(spot),\n            ParkingSpotType.ELECTRIC: self.update_display_board_for_electric(spot),\n        }\n        switcher(spot.get_type(), 'Wrong parking spot type!')\n\n    def update_display_board_for_handicapped(self, spot):\n        if self.__display_board.get_handicapped_free_spot().get_number() == spot.get_number():\n            # find another free handicapped parking and assign to display_board\n            for key in self.__handicapped_spots:\n                if self.__handicapped_spots.get(key).is_free():\n                    self.__display_board.set_handicapped_free_spot(self.__handicapped_spots.get(key))\n\n            self.__display_board.show_empty_spot_number()\n\n    def update_display_board_for_compact(self, spot):\n        if self.__display_board.get_compact_free_spot().get_number() == spot.get_number():\n            # find another free compact parking and assign to display_board\n            for key in self.__compact_spots.key_set():\n                if self.__compact_spots.get(key).is_free():\n                    self.__display_board.set_compact_free_spot(self.__compact_spots.get(key))\n\n            self.__display_board.show_empty_spot_number()\n\n    def free_spot(self, spot):\n        spot.remove_vehicle()\n        switcher = {\n            ParkingSpotType.HANDICAPPED: self.__free_handicapped_spot_count.update(\n              free_spot = self.__free_handicapped_spot_count[\"free_spot\"] + 1\n            ),\n            ParkingSpotType.COMPACT: self.__free_compact_spot_count.update(\n              free_spot=self.__free_compact_spot_count[\"free_spot\"] + 1\n            ),\n            ParkingSpotType.LARGE: self.__free_large_spot_count.update(\n              free_spot=self.__free_large_spot_count[\"free_spot\"] + 1\n            ),\n            ParkingSpotType.MOTORBIKE: self.__free_motorbike_spot_count.update(\n              free_spot=self.__free_motorbike_spot_count[\"free_spot\"] + 1\n            ),\n            ParkingSpotType.ELECTRIC: self.__free_electric_spot_count.update(\n              free_spot=self.__free_electric_spot_count[\"free_spot\"] + 1\n            ),\n        }\n\n        switcher(spot.get_type(), 'Wrong parking spot type!')\n</code></pre> <p>ParkingDisplayBoard: This class encapsulates a parking display board:</p> ParkingDisplayBoard Class <pre><code>class ParkingDisplayBoard:\n    def __init__(self, id):\n        self.__id = id\n        self.__handicapped_free_spot = None\n        self.__compact_free_spot = None\n        self.__large_free_spot = None\n        self.__motorbike_free_spot = None\n        self.__electric_free_spot = None\n\n    def show_empty_spot_number(self):\n        message = \"\"\n        if self.__handicapped_free_spot.is_free():\n            message += \"Free Handicapped: \" + self.__handicapped_free_spot.get_number()\n        else:\n            message += \"Handicapped is full\"\n        message += \"\\n\"\n\n        if self.__compact_free_spot.is_free():\n            message += \"Free Compact: \" + self.__compact_free_spot.get_number()\n        else:\n            message += \"Compact is full\"\n        message += \"\\n\"\n\n        if self.__large_free_spot.is_free():\n            message += \"Free Large: \" + self.__large_free_spot.get_number()\n        else:\n            message += \"Large is full\"\n        message += \"\\n\"\n\n        if self.__motorbike_free_spot.is_free():\n            message += \"Free Motorbike: \" + self.__motorbike_free_spot.get_number()\n        else:\n            message += \"Motorbike is full\"\n        message += \"\\n\"\n\n        if self.__electric_free_spot.is_free():\n            message += \"Free Electric: \" + self.__electric_free_spot.get_number()\n        else:\n            message += \"Electric is full\"\n\n        print(message)\n</code></pre> <p>ParkingLot: Our system will have only one object of this class. This can be enforced by using the Singleton pattern. In software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to only one object.</p> <pre><code>import threading\nfrom .constants import *\n\n\nclass ParkingLot:\n    # singleton ParkingLot to ensure only one object of ParkingLot in the system,\n    # all entrance panels will use this object to create new parking ticket: get_new_parking_ticket(),\n    # similarly exit panels will also use this object to close parking tickets\n    instance = None\n\n    class __OnlyOne:\n        def __init__(self, name, address):\n        # 1. initialize variables: read name, address and parking_rate from database\n        # 2. initialize parking floors: read the parking floor map from database,\n        #    this map should tell how many parking spots are there on each floor. This\n        #    should also initialize max spot counts too.\n        # 3. initialize parking spot counts by reading all active tickets from database\n        # 4. initialize entrance and exit panels: read from database\n\n            self.__name = name\n            self.__address = address\n            self.__parking_rate = ParkingRate()\n\n            self.__compact_spot_count = 0\n            self.__large_spot_count = 0\n            self.__motorbike_spot_count = 0\n            self.__electric_spot_count = 0\n            self.__max_compact_count = 0\n            self.__max_large_count = 0\n            self.__max_motorbike_count = 0\n            self.__max_electric_count = 0\n\n            self.__entrance_panels = {}\n            self.__exit_panels = {}\n            self.__parking_floors = {}\n\n            # all active parking tickets, identified by their ticket_number\n            self.__active_tickets = {}\n\n            self.__lock = threading.Lock()\n\n    def __init__(self, name, address):\n        if not ParkingLot.instance:\n            ParkingLot.instance = ParkingLot.__OnlyOne(name, address)\n        else:\n            ParkingLot.instance.__name = name\n            ParkingLot.instance.__address = address\n\n    def __getattr__(self, name):\n        return getattr(self.instance, name)\n\n    def get_new_parking_ticket(self, vehicle):\n        if self.is_full(vehicle.get_type()):\n            raise Exception('Parking full!')\n    # synchronizing to allow multiple entrances panels to issue a new\n    # parking ticket without interfering with each other\n        self.__lock.acquire()\n        ticket = ParkingTicket()\n        vehicle.assign_ticket(ticket)\n        ticket.save_in_DB()\n        # if the ticket is successfully saved in the database, we can increment the parking spot count\n        self.__increment_spot_count(vehicle.get_type())\n        self.__active_tickets.put(ticket.get_ticket_number(), ticket)\n        self.__lock.release()\n        return ticket\n\n    def is_full(self, type):\n        # trucks and vans can only be parked in LargeSpot\n        if type == VehicleType.Truck or type == VehicleType.Van:\n            return self.__large_spot_count &gt;= self.__max_large_count\n\n        # motorbikes can only be parked at motorbike spots\n        if type == VehicleType.Motorbike:\n            return self.__motorbike_spot_count &gt;= self.__max_motorbike_count\n\n        # cars can be parked at compact or large spots\n        if type == VehicleType.Car:\n            return (self.__compact_spot_count + self.__large_spot_count) &gt;= (self.__max_compact_count + self.__max_large_count)\n\n        # electric car can be parked at compact, large or electric spots\n        return (self.__compact_spot_count + self.__large_spot_count + self.__electric_spot_count) &gt;= (self.__max_compact_count + self.__max_large_count\n                                                                                                  + self.__max_electric_count)\n\n    # increment the parking spot count based on the vehicle type\n    def increment_spot_count(self, type):\n        large_spot_count = 0\n        motorbike_spot_count = 0\n        compact_spot_count = 0\n        electric_spot_count = 0\n        if type == VehicleType.Truck or type == VehicleType.Van:\n            large_spot_count += 1\n        elif type == VehicleType.Motorbike:\n            motorbike_spot_count += 1\n        elif type == VehicleType.Car:\n            if self.__compact_spot_count &lt; self.__max_compact_count:\n                compact_spot_count += 1\n            else:\n                large_spot_count += 1\n        else:  # electric car\n            if self.__electric_spot_count &lt; self.__max_electric_count:\n                electric_spot_count += 1\n            elif self.__compact_spot_count &lt; self.__max_compact_count:\n                compact_spot_count += 1\n            else:\n                large_spot_count += 1\n\n        def is_full(self):\n            for key in self.__parking_floors:\n                if not self.__parking_floors.get(key).is_full():\n                    return False\n            return True\n\n        def add_parking_floor(self, floor):\n            # store in database\n            None\n\n        def add_entrance_panel(self, entrance_panel):\n            # store in database\n            None\n\n        def add_exit_panel(self,  exit_panel):\n            # store in database\n            None\n</code></pre>"},{"location":"case-studies/design-a-restaurant-management-system/","title":"Design a Restaurant Management System","text":""},{"location":"case-studies/design-a-restaurant-management-system/#lets-design-a-restaurant-management-system","title":"Let's design a Restaurant Management System","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagrams</li> <li>Code</li> </ul> <p>A Restaurant Management System is a software built to handle all restaurant activities in an easy and safe manner. This System will give the Restaurant management power and flexibility to manage the entire system from a single portal. The system allows the manager to keep track of available tables in the system as well as the reservation of tables and bill generation.</p> <p></p> <p>Restaurant Management System</p>"},{"location":"case-studies/design-a-restaurant-management-system/#system-requirements","title":"System Requirements","text":"<p>We will focus on the following set of requirements while designing the Restaurant Management System:</p> <ol> <li>The restaurant will have different branches.</li> <li>Each restaurant branch will have a menu.</li> <li>The menu will have different menu sections, containing different menu items.</li> <li>The waiter should be able to create an order for a table and add meals for each seat.</li> <li>Each meal can have multiple meal items. Each meal item corresponds to a menu item.</li> <li>The system should be able to retrieve information about tables currently available to seat walk-in customers.</li> <li>The system should support the reservation of tables.</li> <li>The receptionist should be able to search for available tables by date/time and reserve a table.</li> <li>The system should allow customers to cancel their reservation.</li> <li>The system should be able to send notifications whenever the reservation time is approaching.</li> <li>The customers should be able to pay their bills through credit card, check or cash.</li> <li>Each restaurant branch can have multiple seating arrangements of tables.</li> </ol>"},{"location":"case-studies/design-a-restaurant-management-system/#use-case-diagram","title":"Use Case Diagram","text":"<p>Here are the main Actors in our system:</p> <p>Receptionist: Mainly responsible for adding and modifying tables and their layout, and creating and canceling table reservations. Waiter: To take/modify orders. Manager: Mainly responsible for adding new workers and modifying the menu. Chef: To view and work on an order. Cashier: To generate checks and process payments. System: Mainly responsible for sending notifications about table reservations, cancellations, etc.</p> <p>Here are the top use cases of the Restaurant Management System:</p> <ul> <li>Add/Modify tables: To add, remove, or modify a table in the system.</li> <li>Search tables: To search for available tables for reservation.</li> <li>Place order: Add a new order in the system for a table.</li> <li>Update order: Modify an already placed order, which can include adding/modifying meals or meal items.</li> <li>Create a reservation: To create a table reservation for a certain date/time for an available table.</li> <li>Cancel reservation: To cancel an existing reservation.</li> <li>Check-in: To let the guest check in for their reservation.</li> <li>Make payment: Pay the check for the food.</li> </ul> <p>Here is the use case diagram of our Restaurant Management System:</p> <p></p> <p>Use Case Diagram for Restaurant Management System</p>"},{"location":"case-studies/design-a-restaurant-management-system/#class-diagram","title":"Class Diagram","text":"<p>Here is the description of the different classes of our Restaurant Management System:</p> <ul> <li>Restaurant: This class represents a restaurant. Each restaurant has registered employees. The employees are part of the restaurant because if the restaurant becomes inactive, all its employees will automatically be deactivated.</li> <li>Branch: Any restaurants can have multiple branches. Each branch will have its own set of employees and menus.</li> <li>Menu: All branches will have their own menu.</li> <li>MenuSection and MenuItem: A menu has zero or more menu sections. Each menu section consists of zero or more menu items.</li> <li>Table and TableSeat: The basic building block of the system. Every table will have a unique identifier, maximum sitting capacity, etc. Each table will have multiple seats.</li> <li>Order: This class encapsulates the order placed by a customer.</li> <li>Meal: Each order will consist of separate meals for each table seat.</li> <li>Meal Item: Each Meal will consist of one or more meal items corresponding to a menu item.</li> <li>Account: We\u2019ll have different types of accounts in the system, one will be a receptionist to search and reserve tables and the other, the waiter will place orders in the system.</li> <li>Notification: Will take care of sending notifications to customers.</li> <li>Bill: Contains different bill-items for every meal item.</li> </ul> <p></p> <p>Class Diagram for Restaurant Management System</p> <p></p> <p>UML for Restaurant Management System</p>"},{"location":"case-studies/design-a-restaurant-management-system/#activity-diagrams","title":"Activity Diagrams","text":"<p>Place order: Any waiter can perform this activity. Here are the steps to place an order:</p> <p></p> <p>Activity Diagram for Restaurant Management System Place Order</p> <p>Make a reservation: Any receptionist can perform this activity. Here are the steps to make a reservation:</p> <p></p> <p>Activity Diagram for Restaurant Management System Make Reservation</p> <p>Cancel a reservation: Any receptionist can perform this activity. Here are the steps to cancel a reservation:</p> <p></p> <p>Activity Diagram for Restaurant Management System Cancel Reservation</p>"},{"location":"case-studies/design-a-restaurant-management-system/#code","title":"Code","text":"<p>Here is the high-level definition for the classes described above.</p> <p>Enums, data types, and constants: Here are the required enums, data types, and constants:</p> <pre><code>from enum import Enum\n\n\nclass ReservationStatus(Enum):\n    REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CANCELED, ABANDONED = 1, 2, 3, 4, 5, 6\n\n\nclass SeatType(Enum):\n    REGULAR, KID, ACCESSIBLE, OTHER = 1, 2, 3, 4\n\n\nclass OrderStatus(Enum):\n    RECEIVED, PREPARING, COMPLETED, CANCELED, NONE = 1, 2, 3, 4, 5\n\n\nclass TableStatus(Enum):\n    FREE, RESERVED, OCCUPIED, OTHER = 1, 2, 3, 4\n\n\nclass AccountStatus(Enum):\n    ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED = 1, 2, 3, 4, 5\n\n\nclass PaymentStatus(Enum):\n    UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n\nclass Address:\n    def __init__(self, street, city, state, zip_code, country):\n        self.__street_address = street\n        self.__city = city\n        self.__state = state\n        self.__zip_code = zip_code\n        self.__country = country\n</code></pre> <p>Account, Person, Employee, Receptionist, Manager, and Chef: These classes represent the different people that interact with our system:</p> <pre><code>from abc import ABC\nfrom datetime import datetime\nfrom .constants import *\n\n\n# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nclass Account:\n    def __init__(self, id, password, address, status=AccountStatus.Active):\n        self.__id = id\n        self.__password = password\n        self.__address = address\n        self.__status = status\n\n    def reset_password(self):\n        None\n\n\nclass Person(ABC):\n    def __init__(self, name, email, phone):\n        self.__name = name\n        self.__email = email\n        self.__phone = phone\n\n\nclass Employee(ABC, Person):\n    def __init__(self, id, account, name, email, phone):\n        super().__init__(name, email, phone)\n        self.__employee_id = id\n        self.__date_joined = datetime.date.today()\n        self.__account = account\n\n\nclass Receptionist(Employee):\n    def __init__(self, id, account, name, email, phone):\n        super().__init__(id, account, name, email, phone)\n\n    def create_reservation(self):\n        None\n\n    def search_customer(self, name):\n        None\n\n\nclass Manager(Employee):\n    def __init__(self, id, account, name, email, phone):\n        super().__init__(id, account, name, email, phone)\n\n    def add_employee(self):\n        None\n\n\nclass Chef(Employee):\n    def __init__(self, id, account, name, email, phone):\n        super().__init__(id, account, name, email, phone)\n\n    def take_order(self):\n        None\n</code></pre> <p>Restaurant, Branch, Kitchen, TableChart: These classes represent the top-level classes of the system</p> Kitchen Class <pre><code>class Kitchen:\n    def __init__(self, name):\n        self.__name = name\n        self.__chefs = []\n\n    def assign_chef(self, chef):\n        None\n\n\nclass Branch:\n    def __init__(self, name, location, kitchen):\n        self.__name = name\n        self.__location = location\n        self.__kitchen = kitchen\n\n    def add_table_chart(self):\n        None\n\n\nclass Restaurant:\n    def __init__(self, name):\n        self.__name = name\n        self.__branches = []\n\n    def add_branch(self, branch):\n        None\n\n\nclass TableChart:\n    def __init__(self, id):\n        self.__table_chart_id = id\n        self.__table_chart_image = []\n\n    def print(self):\n        None\n</code></pre> <p>Table, TableSeat, and Reservation: Each table can have multiple seats and customers can make reservations for tables:</p> <pre><code>from datetime import datetime\nfrom .constants import *\n\n\nclass Table:\n    def __init__(self, id, max_capacity, location_identifier, status=TableStatus.FREE):\n        self.__table_id = id\n        self.__max_capacity = max_capacity\n        self.__location_identifier = location_identifier\n        self.__status = status\n        self.__seats = []\n\n    def is_table_free(self):\n        None\n\n    def add_reservation(self):\n        None\n\n    def search(self, capacity, start_time):\n        # return all tables with the given capacity and availability\n        None\n\n\nclass TableSeat:\n    def __init__(self):\n        self.__table_seat_number = 0\n        self.__type = SeatType.REGULAR\n\n    def update_seat_type(self, seat_type):\n        None\n\n\nclass Reservation:\n    def __init__(self, id, people_count, notes, customer):\n        self.__reservation_id = id\n        self.__time_of_reservation = datetime.now()\n        self.__people_count = people_count\n        self.__status = ReservationStatus.REQUESTED\n        self.__notes = notes\n        self.__checkin_time = datetime.now()\n        self.__customer = customer\n        self.__tables = []\n        self.__notifications = []\n\n    def update_people_count(self, count):\n        None\n</code></pre> <p>Menu, MenuSection, and MenuItem: Each restaurant branch will have its own menu, each menu will have multiple menu sections, which will contain menu items:</p> MenuItem Class <pre><code>class MenuItem:\n    def __init__(self, id, title, description, price):\n        self.__menu_item_id = id\n        self.__title = title\n        self.__description = description\n        self.__price = price\n\n    def update_price(self, price):\n        None\n\n\nclass MenuSection:\n    def __init__(self, id, title, description):\n        self.__menu_section_id = id\n        self.__title = title\n        self.__description = description\n        self.__menu_items = []\n\n    def add_menu_item(self, menu_item):\n        None\n\n\nclass Menu:\n    def __init__(self, id, title, description):\n        self.__menu_id = id\n        self.__title = title\n        self.__description = description\n        self.__menu_sections = []\n\n    def add_menu_section(self, menu_section):\n        None\n\n    def print(self):\n        None\n</code></pre> <p>Order, Meal, and MealItem: Each order will have meals for table seats:</p> <pre><code>from datetime import datetime\n\n\nclass MealItem:\n    def __init__(self, id, quantity, menu_item):\n        self.__meal_item_id = id\n        self.__quantity = quantity\n        self.__menu_item = menu_item\n\n    def update_quantity(self, quantity):\n        None\n\n\nclass Meal:\n    def __init__(self, id, seat):\n        self.__meal_id = id\n        self.__seat = seat\n        self.__menu_items = []\n\n    def add_meal_item(self, meal_item):\n        None\n\n\nclass Check():\n    def __init__(self):\n        None\n\n\nclass Order:\n    def __init__(self, id, status, table, waiter, chef):\n        self.__order_id = id\n        self.__OrderStatus = status\n        self.__creation_time = datetime.now()\n\n        self.__meals = []\n        self.__table = table\n        self.__waiter = waiter\n        self.__chef = chef\n        self.__check = Check()\n\n    def add_meal(self, meal):\n        None\n\n    def remove_meal(self, meal):\n        None\n\n    def get_status(self):\n        return self.__OrderStatus\n\n    def set_status(self, status):\n        None\n</code></pre>"},{"location":"case-studies/design-amazon-online-shopping-system/","title":"Design Amazon - Online Shopping System","text":""},{"location":"case-studies/design-amazon-online-shopping-system/#lets-design-an-online-retail-store","title":"Let's design an online retail store.","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagram</li> <li>Sequence Diagram</li> <li>Code</li> </ul> <p>Amazon (amazon.com) is the world\u2019s largest online retailer. The company was originally a bookseller but has expanded to sell a wide variety of consumer goods and digital media. For the sake of this problem, we will focus on their online retail business where users can sell/buy their products.</p> <p></p> <p>Amazon - Online Shopping System</p>"},{"location":"case-studies/design-amazon-online-shopping-system/#system-requirements","title":"System Requirements","text":"<p>We will be designing a system with the following requirements:</p> <ol> <li>Users should be able to add new products to sell.</li> <li>Users should be able to search for products by their name or category.</li> <li>Users can search and view all the products, but they will have to become a registered member to buy a product.</li> <li>Users should be able to add/remove/modify product items in their shopping cart.</li> <li>Users can check out and buy items in the shopping cart.</li> <li>Users can rate and add a review for a product.</li> <li>The user should be able to specify a shipping address where their order will be delivered.</li> <li>Users can cancel an order if it has not shipped.</li> <li>Users should get notifications whenever there is a change in the order or shipping status.</li> <li>Users should be able to pay through credit cards or electronic bank transfer.</li> <li>Users should be able to track their shipment to see the current state of their order.</li> </ol>"},{"location":"case-studies/design-amazon-online-shopping-system/#use-case-diagram","title":"Use Case Diagram","text":"<p>We have four main Actors in our system:</p> <ul> <li>Admin: Mainly responsible for account management and adding or modifying new product categories.</li> <li>Guest: All guests can search the catalog, add/remove items to the shopping cart, as well as become registered members.</li> <li>Member: Members can perform all the activities that guests can, in addition to which, they can place orders and add new products to sell.</li> <li>System: Mainly responsible for sending notifications for orders and shipping updates.</li> </ul> <p>Here are the top use cases of the Online Shopping System:</p> <ol> <li>Add/update products; whenever a product is added or modified, we will update the catalog.</li> <li>Search for products by their name or category.</li> <li>Add/remove product items in the shopping cart.</li> <li>Check-out to buy product items in the shopping cart.</li> <li>Make a payment to place an order.</li> <li>Add a new product category.</li> <li>Send notifications to members with shipment updates.</li> </ol> <p>Here is the use case diagram of our Online Shopping System:</p> <p></p> <p>Use Case Diagram for Online Shoopping System</p>"},{"location":"case-studies/design-amazon-online-shopping-system/#class-diagram","title":"Class Diagram","text":"<p>Here are the descriptions of the different classes of our Online Shopping System:</p> <ul> <li>Account: There are two types of registered accounts in the system: one will be an Admin, who is responsible for adding new product categories and blocking/unblocking members; the other, a Member, who can buy/sell products.</li> <li>Guest: Guests can search for and view products, and add them in the shopping cart. To place an order they have to become a registered member.</li> <li>Catalog: Users of our system can search for products by their name or category. This class will keep an index of all products for faster search.</li> <li>ProductCategory: This will encapsulate the different categories of products, such as books, electronics, etc.</li> <li>Product: This class will encapsulate the entity that the users of our system will be buying and selling. Each Product will belong to a ProductCategory.</li> <li>ProductReview: Any registered member can add a review about a product.</li> <li>ShoppingCart: Users will add product items that they intend to buy to the shopping cart.</li> <li>Item: This class will encapsulate a product item that the users will be buying or placing in the shopping cart. For example, a pen could be a product and if there are 10 pens in the inventory, each of these 10 pens will be considered a product item.</li> <li>Order: This will encapsulate a buying order to buy everything in the shopping cart.</li> <li>OrderLog: Will keep a track of the status of orders, such as unshipped, pending, complete, canceled, etc.</li> <li>ShipmentLog: Will keep a track of the status of shipments, such as pending, shipped, delivered, etc.</li> <li>Notification: This class will take care of sending notifications to customers.</li> <li>Payment: This class will encapsulate the payment for an order. Members can pay through credit card or electronic bank transfer.</li> </ul> <p></p> <p>Class Diagram for Online Shoopping System</p> <p></p> <p>UML for Online Shoopping System</p>"},{"location":"case-studies/design-amazon-online-shopping-system/#activity-diagram","title":"Activity Diagram","text":"<p>Following is the activity diagram for a user performing online shopping:</p> <p></p> <p>Activity Diagram for Online Shoopping System</p>"},{"location":"case-studies/design-amazon-online-shopping-system/#sequence-diagram","title":"Sequence Diagram","text":"<ol> <li>Here is the sequence diagram for searching from the catalog:</li> </ol> <p>Sequence Diagram for Online Shoopping System</p> <ol> <li>Here is the sequence diagram for adding an item to the shopping cart:</li> </ol> <p></p> <p>Sequence Diagram for Online Shoopping System</p> <ol> <li>Here is the sequence diagram for checking out to place an order:</li> </ol> <p></p> <p>Sequence Diagram for Online Shoopping System</p>"},{"location":"case-studies/design-amazon-online-shopping-system/#code","title":"Code","text":"<p>Here is the high-level definition for the classes described above.</p> <p>Enums, data types, and constants: Here are the required enums, data types, and constants:</p> <pre><code>from enum import Enum\n\n\nclass Address:\n    def __init__(self, street, city, state, zip_code, country):\n        self.__street_address = street\n        self.__city = city\n        self.__state = state\n        self.__zip_code = zip_code\n        self.__country = country\n\n\nclass OrderStatus(Enum):\n    UNSHIPPED, PENDING, SHIPPED, COMPLETED, CANCELED, REFUND_APPLIED = 1, 2, 3, 4, 5, 6\n\n\nclass AccountStatus(Enum):\n    ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN = 1, 2, 3, 4, 5, 6\n\n\nclass ShipmentStatus(Enum):\n    PENDING, SHIPPED, DELIVERED, ON_HOLD = 1, 2, 3, 4\n\n\nclass PaymentStatus(Enum):\n    UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n</code></pre> <p>Account, Customer, Admin, and Guest: These classes represent different people that interact with our system:</p> <pre><code>from abc import ABC\nfrom .constants import *\n\n\n# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nclass Account:\n    def __init__(self, user_name, password, name, email, phone, shipping_address, status=AccountStatus):\n        self.__user_name = user_name\n        self.__password = password\n        self.__name = name\n        self.__email = email\n        self.__phone = phone\n        self.__shipping_address = shipping_address\n        self.__status = status.ACTIVE\n        self.__credit_cards = []\n        self.__bank_accounts = []\n\n    def add_product(self, product):\n        None\n\n    def add_productReview(self, review):\n        None\n\n    def reset_password(self):\n        None\n\n\nclass Customer(ABC):\n    def __init__(self, cart, order):\n        self.__cart = cart\n        self.__order = order\n\n    def get_shopping_cart(self):\n        return self.__cart\n\n    def add_item_to_cart(self, item):\n        None\n\n    def remove_item_from_cart(self, item):\n        None\n\n\nclass Guest(Customer):\n    def register_account(self):\n        None\n\n\nclass Member(Customer):\n    def __init__(self, account):\n        self.__account = account\n\n    def place_order(self, order):\n        None\n</code></pre> <p>ProductCategory, Product, and ProductReview: Here are the classes related to a product:</p> ProductCategory Class <pre><code>class ProductCategory:\n    def __init__(self, name, description):\n        self.__name = name\n        self.__description = description\n\n\nclass ProductReview:\n    def __init__(self, rating, review, reviewer):\n        self.__rating = rating\n        self.__review = review\n        self.__reviewer = reviewer\n\n\nclass Product:\n    def __init__(self, id, name, description, price, category, seller_account):\n        self.__product_id = id\n        self.__name = name\n        self.__description = description\n        self.__price = price\n        self.__category = category\n        self.__available_item_count = 0\n\n        self.__seller = seller_account\n\n    def get_available_count(self):\n        return self.__available_item_count\n\n    def update_price(self, new_price):\n        None\n</code></pre> <p>ShoppingCart, Item, Order, and OrderLog: Users will add items to the shopping cart and place an order to buy all the items in the cart.</p> <pre><code>from datetime import datetime\nfrom .constants import *\n\n\nclass Item:\n    def __init__(self, id, quantity, price):\n        self.__product_id = id\n        self.__quantity = quantity\n        self.__price = price\n\n    def update_quantity(self, quantity):\n        None\n\n\nclass ShoppingCart:\n    def __init__(self):\n        self.__items = []\n\n    def add_item(self, item):\n        None\n\n    def remove_item(self, item):\n        None\n\n    def update_item_quantity(self, item, quantity):\n        None\n\n    def get_items(self):\n        return self.__items\n\n    def checkout(self):\n        None\n\n\nclass OrderLog:\n    def __init__(self, order_number, status=OrderStatus.PENDING):\n        self.__order_number = order_number\n        self.__creation_date = datetime.date.today()\n        self.__status = status\n\n\nclass Order:\n    def __init__(self, order_number, status=OrderStatus.PENDING):\n        self.__order_number = 0\n        self.__status = status\n        self.__order_date = datetime.date.today()\n        self.__order_log = []\n\n    def send_for_shipment(self):\n        None\n\n    def make_payment(self, payment):\n        None\n\n    def add_order_log(self, order_log):\n        None\n</code></pre> <p>Shipment, ShipmentLog, and Notification: After successfully placing an order, a shipment record will be created:</p> <pre><code>from abc import ABC\nfrom datetime import datetime\nfrom .constants import *\n\n\nclass ShipmentLog:\n    def __init__(self, shipment_number, status=ShipmentStatus.PENDING):\n        self.__shipment_number = shipment_number\n        self.__status = status\n        self.__creation_date = datetime.date.today()\n\n\nclass Shipment:\n    def __init__(self, shipment_number, shipment_method):\n        self.__shipment_number = shipment_number\n        self.__shipment_date = datetime.date.today()\n        self.__estimated_arrival = datetime.date.today()\n        self.__shipment_method = shipment_method\n        self.__shipmentLogs = []\n\n    def add_shipment_log(self, shipment_log):\n        None\n\n\nclass Notification(ABC):\n    def __init__(self, id, content):\n        self.__notification_id = id\n        self.__created_on = datetime.date.today()\n        self.__content = content\n\n    def send_notification(self, account):\n        None\n</code></pre> <p>Search interface and Catalog: Catalog will implement Search to facilitate searching of products.</p> <pre><code>from abc import ABC\n\n\nclass Search(ABC):\n    def search_products_by_name(self, name):\n        None\n\n    def search_products_by_category(self, category):\n        None\n\n\nclass Catalog(Search):\n    def __init__(self):\n        self.__product_names = {}\n        self.__product_categories = {}\n\n    def search_products_by_name(self, name):\n        return self.product_names.get(name)\n\n    def search_products_by_category(self, category):\n        return self.product_categories.get(category)\n</code></pre>"},{"location":"case-studies/design-an-airline-management-system/","title":"Design an Airline Management System","text":""},{"location":"case-studies/design-an-airline-management-system/#lets-make-an-airline-management-system","title":"Let's make an Airline Management System","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagrams</li> <li>Code</li> </ul> <p>An Airline Management System is a managerial software which targets to control all operations of an airline. Airlines provide transport services for their passengers. They carry or hire aircraft for this purpose. All operations of an airline company are controlled by their airline management system.</p> <p>This system involves the scheduling of flights, air ticket reservations, flight cancellations, customer support, and staff management. Daily flights updates can also be retrieved by using the system.</p> <p></p> <p>Airline Management System</p>"},{"location":"case-studies/design-an-airline-management-system/#system-requirements","title":"System Requirements","text":"<p>We will focus on the following set of requirements while designing the Airline Management System:</p> <ol> <li>Customers should be able to search for flights for a given date and source/destination airport.</li> <li>Customers should be able to reserve a ticket for any scheduled flight. Customers can also build a multi-flight itinerary.</li> <li>Users of the system can check flight schedules, their departure time, available seats, arrival time, and other flight details.</li> <li>Customers can make reservations for multiple passengers under one itinerary.</li> <li>Only the admin of the system can add new aircrafts, flights, and flight schedules. Admin can cancel any pre-scheduled flight (all stakeholders will be notified).</li> <li>Customers can cancel their reservation and itinerary.</li> <li>The system should be able to handle the assignment of pilots and crew members to flights.</li> <li>The system should be able to handle payments for reservations.</li> <li>The system should be able to send notifications to customers whenever a reservation is made/modified or there is an update for their flights.</li> </ol>"},{"location":"case-studies/design-an-airline-management-system/#use-case-diagram","title":"Use Case Diagram","text":"<p>We have five main Actors in our system:</p> <ul> <li>Admin: Responsible for adding new flights and their schedules, canceling any flight, maintaining staff-related work, etc.</li> <li>Front desk officer: Will be able to reserve/cancel tickets.</li> <li>Customer: Can view flight schedule, reserve and cancel tickets.</li> <li>Pilot/Crew: Can view their assigned flights and their schedules.</li> <li>System: Mainly responsible for sending notifications regarding itinerary changes, flight status updates, etc.</li> </ul> <p>Here are the top use cases of the Airline Management System:</p> <ul> <li>Search Flights: To search the flight schedule to find flights for a suitable date and time.</li> <li>Create/Modify/View reservation: To reserve a ticket, cancel it, or view details about the flight or ticket.</li> <li>Assign seats to passengers: To assign seats to passengers for a flight instance with their reservation.</li> <li>Make payment for a reservation: To pay for the reservation.</li> <li>Update flight schedule: To make changes in the flight schedule, and to add or remove any flight.</li> <li>Assign pilots and crew: To assign pilots and crews to flights.</li> </ul> <p>Here is the use case diagram of our Airline Management System:</p> <p></p> <p>Use Case Diagram for Airline Management System</p>"},{"location":"case-studies/design-an-airline-management-system/#class-diagram","title":"Class Diagram","text":"<p>Here are the main classes of our Airline Management System:</p> <ul> <li>Airline: The main part of the organization for which this software has been designed. It has attributes like \u2018name\u2019 and an airline code to distinguish the airline from other airlines.</li> <li>Airport: Each airline operates out of different airports. Each airport has a name, address, and a unique code.</li> <li>Aircraft: Airlines own or hire aircraft to carry out their flights. Each aircraft has attributes like name, model, manufacturing year, etc.</li> <li>Flight: The main entity of the system. Each flight will have a flight number, departure and arrival airport, assigned aircraft, etc.</li> <li>FlightInstance: Each flight can have multiple occurrences; each occurrence will be considered a flight instance in our system. For example, if a British Airways flight from London to Tokyo (flight number: BA212) occurs twice a week, each of these occurrences will be considered a separate flight instance in our system.</li> <li>WeeklySchedule and CustomSchedule: Flights can have multiple schedules and each schedule will create a flight instance.</li> <li>FlightReservation: A reservation is made against a flight instance and has attributes like a unique reservation number, list of passengers and their assigned seats, reservation status, etc.</li> <li>Itinerary: An itinerary can have multiple flights.</li> <li>FlightSeat: This class will represent all seats of an aircraft assigned to a specific flight instance. All reservations of this flight instance will assign seats to passengers through this class.</li> <li>Payment: Will be responsible for collecting payments from customers.</li> <li>Notification: This class will be responsible for sending notifications for flight reservations, flight status update, etc.</li> </ul> <p></p> <p>Class Diagram for Airline Management System</p> <p></p> <p>UML for Airline Management System</p>"},{"location":"case-studies/design-an-airline-management-system/#activity-diagrams","title":"Activity Diagrams","text":"<p>Reserve a ticket: Any customer can perform this activity. Here are the steps to reserve a ticket:</p> <p></p> <p>Activity Diagram for Airline Management System Reserve Ticket</p> <ul> <li>Cancel a reservation: Any customer can perform this activity. Here are the set of steps to cancel a reservation:</li> </ul> <p></p> <p>Activity Diagram for Airline Management System Cancel Reservation</p>"},{"location":"case-studies/design-an-airline-management-system/#code","title":"Code","text":"<p>Here is the code for major classes.</p> <p>Enums and Constants: Here are the required enums, data types, and constants:</p> <pre><code>from enum import Enum\n\n\nclass FlightStatus(Enum):\n    ACTIVE, SCHEDULED, DELAYED, DEPARTED, LANDED, IN_AIR, ARRIVED, CANCELLED, DIVERTED, UNKNOWN = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n\nclass PaymentStatus(Enum):\n    UNPAID, PENDING, COMPLETED, FILLED, DECLINED, CANCELLED, ABANDONED, SETTLING, SETTLED, REFUNDED = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n\n\nclass ReservationStatus(Enum):\n    REQUESTED, PENDING, CONFIRMED, CHECKED_IN, CANCELLED, ABANDONED = 1, 2, 3, 4, 5, 6\n\n\nclass SeatClass(Enum):\n    ECONOMY, ECONOMY_PLUS, PREFERRED_ECONOMY, BUSINESS, FIRST_CLASS = 1, 2, 3, 4, 5\n\n\nclass SeatType(Enum):\n    REGULAR, ACCESSIBLE, EMERGENCY_EXIT, EXTRA_LEG_ROOM = 1, 2, 3, 4, 5\n\n\nclass AccountStatus(Enum):\n    ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED = 1, 2, 3, 4, 5, 6\n\n\nclass Address:\n    def __init__(self, street, city, state, zip_code, country):\n        self.__street_address = street\n        self.__city = city\n        self.__state = state\n        self.__zip_code = zip_code\n        self.__country = country\n</code></pre> <p>Account, Person, Customer and Passenger: These classes represent the different people that interact with our system:</p> <pre><code>from abc import ABC\nfrom .constants import *\n\n\n# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\nclass Account:\n    def __init__(self, id, password, status=AccountStatus.Active):\n        self.__id = id\n        self.__password = password\n        self.__status = status\n\n    def reset_password(self):\n        None\n\n\nclass Person(ABC):\n    def __init__(self, name, address, email, phone, account):\n        self.__name = name\n        self.__address = address\n        self.__email = email\n        self.__phone = phone\n        self.__account = account\n\n\nclass Customer(Person):\n    def __init__(self, frequent_flyer_number):\n        self.__frequent_flyer_number\n\n    def get_itineraries(self):\n        None\n\n\nclass Passenger:\n    def __init__(self, name, passport_number, date_of_birth):\n        self.__name = name\n        self.__passport_number = passport_number\n        self.__date_of_birth = date_of_birth\n\n    def get_passport_number(self):\n        return self.__passport_number\n</code></pre> <p>Airport, Aircraft, Seat and FlightSeat: These classes represent the top-level classes of the system:</p> Airport Class <pre><code>class Airport:\n    def __init__(self, name, address, code):\n        self.__name = name\n        self.__address = address\n        self.__code = code\n\n    def get_flights(self):\n        None\n\n\nclass Aircraft:\n    def __init__(self, name, model, manufacturing_year):\n        self.__name = name\n        self.__model = model\n        self.__manufacturing_year = manufacturing_year\n        self.__seats = []\n\n    def get_flights(self):\n        None\n\n\nclass Seat:\n    def __init__(self, seat_number, type, seat_class):\n        self.__seat_number = seat_number\n        self.__type = type\n        self.__seat_class = seat_class\n\n\nclass FlightSeat(Seat):\n    def __init__(self, fare):\n        self.__fare = fare\n\n    def get_fare(self):\n        return self.__fare\n</code></pre> <p>Flight Schedule classes, Flight, FlightInstance, FlightReservation, Itinerary: Here are the classes related to flights and reservations:</p> WeeklySchedule Class <pre><code>class WeeklySchedule:\n    def __init__(self, day_of_week, departure_time):\n        self.__day_of_week = day_of_week\n        self.__departure_time = departure_time\n\n\nclass CustomSchedule:\n    def __init__(self, custom_date, departure_time):\n        self.__custom_date = custom_date\n        self.__departure_time = departure_time\n\n\nclass Flight:\n    def __init__(self, flight_number, departure, arrival, duration_in_minutes):\n        self.__flight_number = flight_number\n        self.__departure = departure\n        self.__arrival = arrival\n        self.__duration_in_minutes = duration_in_minutes\n\n        self.__weekly_schedules = []\n        self.__custom_schedules = []\n        self.__flight_instances = []\n\n\nclass FlightInstance:\n    def __init__(self, departure_time, gate, status, aircraft):\n        self.__departure_time = departure_time\n        self.__gate = gate\n        self.__status = status\n        self.__aircraft = aircraft\n\n    def cancel(self):\n        None\n\n    def update_status(self, status):\n        None\n\n\nclass FlightReservation:\n    def __init__(self, reservation_number, flight, aircraft, creation_date, status):\n        self.__reservation_number = reservation_number\n        self.__flight = flight\n        self.__seat_map = {}\n        self.__creation_date = creation_date\n        self.__status = status\n\n    def fetch_reservation_details(self, reservation_number):\n        None\n\n    def get_passengers(self):\n        None\n\n\nclass Itinerary:\n    def __init__(self, customer_id, starting_airport, final_airport, creation_date):\n        self.__customer_id = customer_id\n        self.__starting_airport = starting_airport\n        self.__final_airport = final_airport\n        self.__creation_date = creation_date\n        self.__reservations = []\n\n    def get_reservations(self):\n        None\n\n    def make_reservation(self):\n        None\n\n    def make_payment(self):\n        None\n</code></pre>"},{"location":"case-studies/design-an-atm/","title":"Design an ATM","text":""},{"location":"case-studies/design-an-atm/#lets-design-an-atm","title":"Let's design an ATM.","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>How ATM works?</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagrams</li> <li>Sequence Diagram</li> <li>Code</li> </ul> <p>An automated teller machine (ATM) is an electronic telecommunications instrument that provides the clients of a financial institution with access to financial transactions in a public space without the need for a cashier or bank teller. ATMs are necessary as not all the bank branches are open every day of the week, and some customers may not be in a position to visit a bank each time they want to withdraw or deposit money.</p> <p></p> <p>ATM</p>"},{"location":"case-studies/design-an-atm/#system-requirements","title":"System Requirements","text":"<p>The main components of the ATM that will affect interactions between the ATM and its users are:</p> <ol> <li>Card reader: to read the users\u2019 ATM cards.</li> <li>Keypad: to enter information into the ATM e.g. PIN. cards.</li> <li>Screen: to display messages to the users.</li> <li>Cash dispenser: for dispensing cash.</li> <li>Deposit slot: For users to deposit cash or checks.</li> <li>Printer: for printing receipts.</li> <li>Communication/Network Infrastructure: it is assumed that the ATM has a communication infrastructure to communicate with the bank upon any transaction or activity.</li> </ol> <p>The user can have two types of accounts: 1) Checking, and 2) Savings, and should be able to perform the following five transactions on the ATM:</p> <ol> <li>Balance inquiry: To see the amount of funds in each account.</li> <li>Deposit cash: To deposit cash.</li> <li>Deposit check: To deposit checks.</li> <li>Withdraw cash: To withdraw money from their checking account.</li> <li>Transfer funds: To transfer funds to another account.</li> </ol>"},{"location":"case-studies/design-an-atm/#how-atm-works","title":"How ATM works?","text":"<p>The ATM will be managed by an operator, who operates the ATM and refills it with cash and receipts. The ATM will serve one customer at a time and should not shut down while serving. To begin a transaction in the ATM, the user should insert their ATM card, which will contain their account information. Then, the user should enter their Personal Identification Number (PIN) for authentication. The ATM will send the user\u2019s information to the bank for authentication; without authentication, the user cannot perform any transaction/service.</p> <p>The user\u2019s ATM card will be kept in the ATM until the user ends a session. For example, the user can end a session at any time by pressing the cancel button, and the ATM Card will be ejected. The ATM will maintain an internal log of transactions that contains information about hardware failures; this log will be used by the ATM operator to resolve any issues.</p> <ol> <li>Identify the system user through their PIN.</li> <li>In the case of depositing checks, the amount of the check will not be added instantly to the user account; it is subject to manual verification and bank approval.</li> <li>It is assumed that the bank manager will have access to the ATM\u2019s system information stored in the bank database.</li> <li>It is assumed that user deposits will not be added to their account immediately because it will be subject to verification by the bank.</li> <li>It is assumed the ATM card is the main player when it comes to security; users will authenticate themselves with their debit card and security pin.</li> </ol>"},{"location":"case-studies/design-an-atm/#use-case-diagram","title":"Use Case Diagram","text":"<p>Here are the actors of the ATM system and their use cases:</p> <p>Operator: The operator will be responsible for the following operations:</p> <ol> <li>Turning the ATM ON/OFF using the designated Key-Switch.</li> <li>Refilling the ATM with cash.</li> <li>Refilling the ATM\u2019s printer with receipts.</li> <li>Refilling the ATM\u2019s printer with INK.</li> <li>Take out deposited cash and checks.</li> </ol> <p>Customer: The ATM customer can perform the following operations:</p> <ol> <li>Balance inquiry: the user can view his/her account balance.</li> <li>Cash withdrawal: the user can withdraw a certain amount of cash.</li> <li>Deposit funds: the user can deposit cash or checks.</li> <li>Transfer funds: the user can transfer funds to other accounts.</li> </ol> <p>Bank Manager: The Bank Manager can perform the following operations:</p> <ol> <li>Generate a report to check total deposits.</li> <li>Generate a report to check total withdrawals.</li> <li>Print total deposits/withdrawal reports.</li> <li>Checks the remaining cash in the ATM.</li> </ol> <p>Here is the use case diagram of our ATM system:</p> <p></p> <p>Use Case Diagram for ATM</p>"},{"location":"case-studies/design-an-atm/#class-diagram","title":"Class Diagram","text":"<p>Here are the main classes of the ATM System:</p> <ul> <li>ATM: The main part of the system for which this software has been designed. It has attributes like \u2018atmID\u2019 to distinguish it from other available ATMs, and \u2018location\u2019 which defines the physical address of the ATM.</li> <li>CardReader: To encapsulate the ATM\u2019s card reader used for user authentication.</li> <li>CashDispenser: To encapsulate the ATM component which will dispense cash.</li> <li>Keypad: The user will use the ATM\u2019s keypad to enter their PIN or amounts.</li> <li>Screen: Users will be shown all messages on the screen and they will select different transactions by touching the screen.</li> <li>Printer: To print receipts.</li> <li>DepositSlot: User can deposit checks or cash through the deposit slot.</li> <li>Bank: To encapsulate the bank which ownns the ATM. The bank will hold all the account information and the ATM will communicate with the bank to perform customer transactions.</li> <li>Account: We\u2019ll have two types of accounts in the system: 1)Checking and 2)Saving.</li> <li>Customer: This class will encapsulate the ATM\u2019s customer. It will have the customer\u2019s basic information like name, email, etc.</li> <li>Card: Encapsulating the ATM card that the customer will use to authenticate themselves. Each customer can have one card.</li> <li>Transaction: Encapsulating all transactions that the customer can perform on the ATM, like BalanceInquiry, Deposit, Withdraw, etc.</li> </ul> <p></p> <p>Class Diagram for ATM</p> <p></p> <p>UML for ATM</p>"},{"location":"case-studies/design-an-atm/#activity-diagrams","title":"Activity Diagrams","text":"<p>Customer authentication: Following is the activity diagram for a customer authenticating themselves to perform an ATM transaction:</p> <p></p> <p>Activity Diagram for ATM Customer Authentication</p> <p>Cash withdraw: Following is the activity diagram for a user withdrawing cash:</p> <p></p> <p>Activity Diagram for ATM Cash Withdraw</p> <p>Deposit check: Following is the activity diagram for the customer depositing a check:</p> <p></p> <p>Activity Diagram for ATM Deposit Check</p> <p>Fund transfer: Following is the activity diagram for a user transferring funds to another account:</p> <p></p> <p>Activity Diagram for ATM Fund Transfer</p>"},{"location":"case-studies/design-an-atm/#sequence-diagram","title":"Sequence Diagram","text":"<p>Here is the sequence diagram for balance inquiry transaction:</p> <p></p> <p>Sequence Diagram for ATM</p>"},{"location":"case-studies/design-an-atm/#code","title":"Code","text":"<p>Here is the skeleton code for the classes defined above:</p> <p>Enums and Constants: Here are the required enums, data types, and constants:</p> <pre><code>from enum import Enum\n\n\nclass TransactionType(Enum):\n    BALANCE_INQUIRY, DEPOSIT_CASH, DEPOSIT_CHECK, WITHDRAW, TRANSFER = 1, 2, 3, 4, 5\n\n\nclass TransactionStatus(Enum):\n    SUCCESS, FAILURE, BLOCKED, FULL, PARTIAL, NONE = 1, 2, 3, 4, 5, 6\n\n\nclass CustomerStatus(Enum):\n    ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, CLOSED, UNKNOWN = 1, 2, 3, 4, 5, 6, 7\n\n\nclass Address:\n    def __init__(self, street, city, state, zip_code, country):\n        self.__street_address = street\n        self.__city = city\n        self.__state = state\n        self.__zip_code = zip_code\n        self.__country = country\n</code></pre> <p>Customer, Card, and Account: \u201cCustomer\u201d encapsulates the ATM user, \u201cCard\u201d the ATM card, and \u201cAccount\u201d can be of two types: checking and savings:</p> <pre><code># For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nclass Customer:\n    def __init__(self, name, address, email, phone, status):\n        self.__name = name\n        self.__address = address\n        self.__email = email\n        self.__phone = phone\n        self.__status = status\n        self.__card = Card()\n        self.__account = Account\n\n    def make_transaction(self, transaction):\n        None\n\n    def get_billing_address(self):\n        None\n\n\nclass Card:\n    def __init__(self, number, customer_name, expiry, pin):\n        self.__card_number = number\n        self.__customer_name = customer_name\n        self.__card_expiry = expiry\n        self.__pin = pin\n\n    def get_billing_address(self):\n        None\n\n\nclass Account:\n    def __init__(self, account_number):\n        self.__account_number = account_number\n        self.__total_balance = 0.0\n        self.__available_balance = 0.0\n\n    def get_available_balance(self):\n        return self.__available_balance\n\n\nclass SavingAccount(Account):\n    def __init__(self, withdraw_limit):\n        self.__withdraw_limit = withdraw_limit\n\n\nclass CheckingAccount(Account):\n    def __init__(self, debit_card_number):\n        self.__debit_card_number = debit_card_number\n</code></pre> <p>Bank, ATM, CashDispenser, Keypad, Screen, Printer and DepositSlot: The ATM will have different components like keypad, screen, etc.</p> <pre><code>from abc import ABC\n\n\nclass Bank:\n  def __init__(self, name, bank_code):\n    self.__name = name\n    self.__bank_code = bank_code\n\n  def get_bank_code(self):\n    return self.__bank_code\n\n  def add_atm(self, atm):\n    None\n\n\nclass ATM:\n  def __init__(self, id, location):\n    self.__atm_id = id\n    self.__location = location\n\n    self.__cash_dispenser = CashDispenser()\n    self.__keypad = Keypad()\n    self.__screen = Screen()\n    self.__printer = Printer()\n    self.__check_deposit = CheckDeposit()\n    self.__cash_deposit = CashDeposit\n\n  def authenticate_user(self):\n    None\n\n  def make_transaction(self, customer, transaction):\n    None\n\n\nclass CashDispenser:\n  def __init__(self):\n    self.__total_five_dollar_bills = 0\n    self.__total_twenty_dollar_bills = 0\n\n  def dispense_cash(self, amount):\n    None\n\n  def can_dispense_cash(self):\n    None\n\n\nclass Keypad:\n  def get_input(self):\n    None\n\n\nclass Screen:\n  def show_message(self, message):\n    None\n\n  def get_input(self):\n    None\n\n\nclass Printer:\n  def print_receipt(self, transaction):\n    None\n\n\nclass CheckDeposit:\n    def __init__(self):\n        None\n\n\nclass CashDeposit:\n    def __init__(self):\n        None\n\n\nclass DepositSlot(ABC):\n  def __init__(self):\n    self.__total_amount = 0.0\n\n  def get_total_amount(self):\n    return self.__total_amount\n\n\nclass CheckDepositSlot(DepositSlot):\n  def get_check_amount(self):\n    None\n\n\nclass CashDepositSlot(DepositSlot):\n  def receive_dollar_bill(self):\n    None\n</code></pre> <p>Transaction and its subclasses: Customers can perform different transactions on the ATM, these classes encapsulate them:</p> <pre><code>from abc import ABC\n\n\nclass Transaction(ABC):\n    def __init__(self, id, creation_date, status):\n        self.__transaction_id = id\n        self.__creation_time = creation_date\n        self.__status = status\n\n    def make_transation(self):\n        None\n\n\nclass BalanceInquiry(Transaction):\n    def __init__(self, account_id):\n        self.__account_id = account_id\n\n    def get_account_id(self):\n        return self.__account_id\n\n\nclass Deposit(Transaction):\n    def __init__(self, amount):\n        self.__amount = amount\n\n    def get_amount(self):\n        return self.__amount\n\n\nclass CheckDeposit(Deposit):\n    def __init__(self, check_number, bank_code):\n        self.__check_number = check_number\n        self.__bank_code = bank_code\n\n    def get_check_number(self):\n        return self.__check_number\n\n\nclass CashDeposit(Deposit):\n    def __init__(self, cash_deposit_limit):\n        self.__cash_deposit_limit = cash_deposit_limit\n\n\nclass Withdraw(Transaction):\n    def __init__(self, amount):\n        self.__amount = amount\n\n    def get_amount(self):\n        return self.__amount\n\n\nclass Transfer(Transaction):\n    def __init__(self, destination_account_number):\n        self.__destination_account_number = destination_account_number\n\n    def get_destination_account(self):\n        return self.__destination_account_number\n</code></pre>"},{"location":"case-studies/design-an-online-stock-brokerage-system/","title":"Design an Online Stock Brokerage System","text":""},{"location":"case-studies/design-an-online-stock-brokerage-system/#lets-design-an-online-stock-brokerage-system","title":"Let's design an Online Stock Brokerage System","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagrams</li> <li>Code</li> </ul> <p>An Online Stock Brokerage System facilitates its users the trade (i.e. buying and selling) of stocks online. It allows clients to keep track of and execute their transactions, and shows performance charts of the different stocks in their portfolios. It also provides security for their transactions and alerts them to pre-defined levels of changes in stocks, without the use of any middlemen.</p> <p>The online stock brokerage system automates traditional stock trading using computers and the internet, making the transaction faster and cheaper. This system also gives speedier access to stock reports, current market trends, and real-time stock prices.</p> <p></p> <p>Online Stock Brokerage System</p>"},{"location":"case-studies/design-an-online-stock-brokerage-system/#system-requirements","title":"System Requirements","text":"<p>We will focus on the following set of requirements while designing the online stock brokerage system:</p> <ol> <li>Any user of our system should be able to buy and sell stocks.</li> <li>Any user can have multiple watchlists containing multiple stock quotes.</li> <li>Users should be able to place stock trade orders of the following types: 1) market, 2) limit, 3) stop loss and, 4) stop limit.</li> <li>Users can have multiple \u2018lots\u2019 of a stock. This means that if a user has bought a stock multiple times, the system should be able to differentiate between different lots of the same stock.</li> <li>The system should be able to generate reports for quarterly updates and yearly tax statements.</li> <li>Users should be able to deposit and withdraw money either via check, wire, or electronic bank transfer.</li> <li>The system should be able to send notifications whenever trade orders are executed.</li> </ol>"},{"location":"case-studies/design-an-online-stock-brokerage-system/#use-case-diagram","title":"Use Case Diagram","text":"<p>We have three main Actors in our system:</p> <ul> <li>Admin: Mainly responsible for administrative functions like blocking or unblocking members.</li> <li>Member: All members can search the stock inventory, as well as buy and sell stocks. Members can have multiple watchlists containing multiple stock quotes.</li> <li>System: Mainly responsible for sending notifications for stock orders and periodically fetching stock quotes from the stock exchange.</li> </ul> <p>Here are the top use cases of the Stock Brokerage System:</p> <ul> <li>Register new account/Cancel membership: To add a new member or cancel the membership of an existing member.</li> <li>Add/Remove/Edit watchlist: To add, remove or modify a watchlist.</li> <li>Search stock inventory: To search for stocks by their symbols.</li> <li>Place order: To place a buy or sell order on the stock exchange.</li> <li>Cancel order: Cancel an already placed order.</li> <li>Deposit/Withdraw money: Members can deposit or withdraw money via check, wire or electronic bank transfer.</li> </ul> <p>Here is the use case diagram of an Online Stock Brokerage System:</p> <p></p> <p>Use Case Diagram for Online Stock Brokerage System</p>"},{"location":"case-studies/design-an-online-stock-brokerage-system/#class-diagram","title":"Class Diagram","text":"<p>Here are the main classes of our Online Stock Brokerage System:</p> <ul> <li>Account: Consists of the member\u2019s name, address, e-mail, phone, total funds, funds that are available for trading, etc. We\u2019ll have two types of accounts in the system: one will be a general member, and the other will be an Admin. The Account class will also contain all the stocks the member is holding.</li> <li>StockExchange: The stockbroker system will fetch all stocks and their current prices from the stock exchange. StockExchange will be a singleton class encapsulating all interactions with the stock exchange. This class will also be used to place stock trading orders on the stock exchange.</li> <li>Stock: The basic building block of the system. Every stock will have a symbol, current trading price, etc.</li> <li>StockInventory: This class will fetch and maintain the latest stock prices from the StockExchange. All system components will read the most recent stock prices from this class.</li> <li>Watchlist: A watchlist will contain a list of stocks that the member wants to follow.</li> <li>Order: Members can place stock trading orders whenever they would like to sell or buy stock positions. The system would support multiple types of orders:</li> <li>Market Order: Market order will enable users to buy or sell stocks immediately at the current market price.</li> <li>Limit Order: Limit orders will allow a user to set a price at which they want to buy or sell a stock.</li> <li>Stop Loss Order: An order to buy or sell once the stock reaches a certain price.</li> <li>Stop Limit Order: The stop-limit order will be executed at a specified price or better after a given stop price has been reached. Once the stop price is reached, the stop-limit order becomes a limit order to buy or sell at the limit price or better.</li> <li>OrderPart: An order could be fulfilled in multiple parts. For example, a market order to buy 100 stocks could have one part containing 70 stocks at $10 and another part with 30 stocks at $10.05.</li> <li>StockLot: Any member can buy multiple lots of the same stock at different times. This class will represent these individual lots. For example, the user could have purchased 100 shares of AAPL yesterday and 50 more stocks of AAPL today. While selling, users will be able to select which lot they want to sell first.</li> <li>StockPosition: This class will contain all the stocks that the user holds.</li> <li>Statement: All members will have reports for quarterly updates and yearly tax statements.</li> <li>DepositMoney &amp; WithdrawMoney: Members will be able to move money through check, wire or electronic bank transfers.</li> <li>Notification: Will take care of sending notifications to members.</li> </ul> <p></p> <p>Class Diagram for Online Stock Brokerage System</p> <p></p> <p>UML for Online Stock Brokerage System</p>"},{"location":"case-studies/design-an-online-stock-brokerage-system/#activity-diagrams","title":"Activity Diagrams","text":"<p>Place a buy order: Any system user can perform this activity. Here are the steps to place a buy order:</p> <p></p> <p>Activity Diagram for Online Stock Brokerage System Buy Order</p> <p>Place a sell order: Any system user can perform this activity. Here are the steps to place a buy order:</p> <p></p> <p>Activity Diagram for Online Stock Brokerage System Sell Order</p>"},{"location":"case-studies/design-an-online-stock-brokerage-system/#code","title":"Code","text":"<p>Here is the code for the top use cases.</p> <p>Enums and Constants: Here are the required enums and constants:</p> <pre><code>from enum import Enum\n\n\nclass ReturnStatus(Enum):\n    SUCCESS, FAIL, INSUFFICIENT_FUNDS, INSUFFICIENT_QUANTITY, NO_STOCK_POSITION = 1, 2, 3, 4, 5, 6\n\n\nclass OrderStatus(Enum):\n    OPEN, FILLED, PARTIALLY_FILLED, CANCELLED = 1, 2, 3, 4\n\n\nclass TimeEnforcementType(Enum):\n    GOOD_TILL_CANCELLED, FILL_OR_KILL, IMMEDIATE_OR_CANCEL, ON_THE_OPEN, ON_THE_CLOSE = 1, 2, 3, 4, 5\n\n\nclass AccountStatus(Enum):\n    ACTIVE, CLOSED, CANCELED, BLACKLISTED, NONE = 1, 2, 3, 5\n\n\nclass Location:\n    def __init__(self, street, city, state, zip_code, country):\n        self.__street_address = street\n        self.__city = city\n        self.__state = state\n        self.__zip_code = zip_code\n        self.__country = country\n\n\nclass Constants:\n    def __init__(self):\n        self.__MONEY_TRANSFER_LIMIT = 100000\n</code></pre> <p>StockExchange: To encapsulate all the interactions with the stock exchange:</p> <pre><code>from .order import Order\n\n\nclass StockExchange:\n    # singleton, used for restricting to create only one instance\n    instance = None\n\n    class __OnlyOne:\n        def __init__(self):\n            None\n\n    def __init__(self):\n        if not StockExchange.instance:\n            StockExchange.instance = StockExchange.__OnlyOne()\n\n    def place_order(self, order):\n        return_status = self.get_instance().submit_order(Order)\n        return return_status\n</code></pre> <p>Order: To encapsulate all buy or sell orders:</p> <pre><code>from abc import ABC\nfrom datetime import datetime\nfrom .constants import OrderStatus, TimeEnforcementType\n\n\nclass Order(ABC):\n    def __init__(self, id):\n        self.__order_id = id\n        self.__is_buy_order = False\n        self.__status = OrderStatus.OPEN\n        self.__time_enforcement = TimeEnforcementType.ON_THE_OPEN\n        self.__creation_time = datetime.now()\n\n        self.__parts = {}\n\n    def set_status(self, status):\n        self.status = status\n\n    def save_in_DB(self):\n        None\n\n    # save in the database\n\n    def add_order_parts(self, parts):\n        for part in parts:\n            self.parts[part.get_id()] = part\n\n\nclass LimitOrder(Order):\n    def __init__(self):\n        self.__price_limit = 0.0\n</code></pre> <p>Member: Members will be buying and selling stocks:</p> <pre><code>from datetime import datetime\nfrom abc import ABC\nfrom .constants import OrderStatus, AccountStatus, ReturnStatus\nfrom .order import LimitOrder\nfrom .stock_exchange import StockExchange\n\n\nclass Account(ABC):\n    def __init__(self, id, password, name, address, email, phone, status=AccountStatus.NONE):\n        self.__id = id\n        self.__password = password\n        self.__name = name\n        self.__address = address\n        self.__email = email\n        self.__phone = phone\n        self.__status = AccountStatus.NONE\n\n    def reset_password(self):\n        None\n\n\nclass Member(Account):\n    def __init__(self):\n        self.__available_funds_for_trading = 0.0\n        self.__date_of_membership = datetime.date.today()\n        self.__stock_positions = {}\n        self.__active_orders = {}\n\n    def place_sell_limit_order(self, stock_id, quantity, limit_price, enforcement_type):\n        # check if member has this stock position\n        if stock_id not in self.__stock_positions:\n            return ReturnStatus.NO_STOCK_POSITION\n\n        stock_position = self.__stock_positions[stock_id]\n        # check if the member has enough quantity available to sell\n        if stock_position.get_quantity() &lt; quantity:\n            return ReturnStatus.INSUFFICIENT_QUANTITY\n\n        order = LimitOrder(stock_id, quantity, limit_price, enforcement_type)\n        order.is_buy_order = False\n        order.save_in_DB()\n        success = StockExchange.place_order(order)\n        if success:\n            order.set_status(OrderStatus.FAILED)\n            order.save_in_DB()\n        else:\n            self.active_orders.add(order.get_order_id(), order)\n        return success\n\n    def place_buy_limit_order(self, stock_id, quantity, limit_price, enforcement_type):\n        # check if the member has enough funds to buy this stock\n        if self.__available_funds_for_trading &lt; quantity * limit_price:\n            return ReturnStatus.INSUFFICIENT_FUNDS\n\n        order = LimitOrder(stock_id, quantity, limit_price, enforcement_type)\n        order.is_buy_order = True\n        order.save_in_DB()\n        success = StockExchange.place_order(order)\n        if not success:\n            order.set_status(OrderStatus.FAILED)\n            order.save_in_DB()\n        else:\n            self.active_orders.add(order.get_order_id(), order)\n        return success\n\n    # this function will be invoked whenever there is an update from\n    # stock exchange against an order\n    def callback_stock_exchange(self, order_id, order_parts, status):\n        order = self.active_orders[order_id]\n        order.add_order_parts(order_parts)\n        order.set_status(status)\n        order.update_in_DB()\n\n        if status == OrderStatus.FILLED or status == OrderStatus.CANCELLEd:\n            self.active_orders.remove(order_id)\n</code></pre>"},{"location":"case-studies/design-blackjack-and-a-deck-of-cards/","title":"Design Blackjack and a Deck of Cards","text":""},{"location":"case-studies/design-blackjack-and-a-deck-of-cards/#lets-design-a-game-of-blackjack","title":"Let's design a game of Blackjack.","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagram</li> <li>Code</li> </ul> <p>Blackjack is the most widely played casino game in the world. It falls under the category of comparing-card games and is usually played between several players and a dealer. Each player, in turn, competes against the dealer, but players do not play against each other. In Blackjack, all players and the dealer try to build a hand that totals 21 points without going over. The hand closest to 21 wins.</p> <p></p> <p>Blackjack and a Deck of Cards</p>"},{"location":"case-studies/design-blackjack-and-a-deck-of-cards/#system-requirements","title":"System Requirements","text":"<p>Blackjack is played with one or more standard 52-card decks. The standard deck has 13 ranks in 4 suits.</p> <p>Background</p> <ul> <li>To start with, the players and the dealer are dealt separate hands. Each hand has two cards in it.</li> <li>The dealer has one card exposed (the up card) and one card concealed (the hole card), leaving the player with incomplete information about the state of the game.</li> <li>The player\u2019s objective is to make a hand that has more points than the dealer, but less than or equal to 21 points.</li> <li>The player is responsible for placing bets when they are offered, and taking additional cards to complete their hand.</li> <li>The dealer will draw additional cards according to a simple rule: when the dealer\u2019s hand is 16 or less, they will draw cards (called a hit), when it is 17 or more, they will not draw additional cards (or stand pat).</li> </ul> <p>Points calculation</p> <p>Blackjack has different point values for each of the cards:</p> <ul> <li>The number cards (2-10) have the expected point values.</li> <li>The face cards (Jack, Queen, and King) all have a value of 10 points.</li> <li>The Ace can count as one point or eleven points. Because of this, an Ace and a 10 or face card totals 21. This two-card winner is called \u201cblackjack\u201d.</li> <li>When the points include an ace counting as 11, the total is called soft-total; when the ace counts as 1, the total is called hard-total. For example, A+5 can be considered a soft 16 or a hard 6.</li> </ul> <p>Gameplay</p> <ul> <li>The player places an initial bet.</li> <li>The player and dealer are each dealt a pair of cards.</li> <li>Both of the player\u2019s cards are face up, the dealer has one card up and one card down.</li> <li>If the dealer\u2019s card is an ace, the player is offered insurance.</li> </ul> <p>Initially, the player has a number of choices:</p> <ul> <li>If the two cards are the same rank, the player can elect to split into two hands.</li> <li>The player can double their bet and take just one more card.</li> <li>The more typical scenario is for the player to take additional cards (a hit ) until either their hand totals more than 21 (they bust ), or their hand totals exactly 21, or they elect to stand.</li> </ul> <p>If the player\u2019s hand is over 21, their bet is resolved immediately as a loss. If the player\u2019s hand is 21 or less, it will be compared to the dealer\u2019s hand for resolution.</p> <p>Dealer has an Ace: If the dealer\u2019s up card is an ace, the player is offered an insurance bet. This is an additional proposition that pays 2:1 if the dealer\u2019s hand is exactly 21. If this insurance bet wins, it will, in effect, cancel the loss of the initial bet. After offering insurance to the player, the dealer will check their hole card and resolve the insurance bets. If the hole card is a 10-point card, the dealer has blackjack, the card is revealed, and insurance bets are paid. If the hole card is not a 10-point card, the insurance bets are lost, but the card is not revealed.</p> <p>Split Hands: When dealt two cards of the same rank, the player can split the cards to create two hands. This requires an additional bet on the new hand. The dealer will deal an additional card to each new hand, and the hands are played independently. Generally, the typical scenario described above applies to each of these hands.</p> <p>Bets</p> <ul> <li>Ante: This is the initial bet and is mandatory to play.</li> <li>Insurance: This bet is offered only when the dealer shows an ace. The amount must be half the ante.</li> <li>Split: This can be thought of as a bet that is offered only when the player\u2019s hand has two cards of equal rank. The amount of the bet must match the original ante.</li> <li>Double: This can be thought of as a bet that is offered instead of taking an ordinary hit. The amount of the bet must match the original ante.</li> </ul>"},{"location":"case-studies/design-blackjack-and-a-deck-of-cards/#use-case-diagram","title":"Use Case Diagram","text":"<p>We have two main Actors in our system:</p> <ul> <li>Dealer: Mainly responsible for dealing cards and game resolution.</li> <li>Player: Places the initial bets, accepts or declines additional bets - including insurance, and splits hands. Accepts or rejects the offered resolution, including even money. Chooses among hit, double and stand pat options.</li> </ul> <p>Typical Blackjack Game Use cases</p> <p>Here are the top use cases of the Blackjack game:</p> <ul> <li>Create Hands: Initially both the player and the dealer are given two cards each. The player has both cards visible whereas only one card of the dealer\u2019s hand is visible to the player.</li> <li>Place Bet: To start the game, the player has to place a bet.</li> <li>Player plays the hand: If the hand is under 21 points, the player has three options:</li> <li>Hit: The hand gets an additional card and this process repeats.</li> <li>Double Down: The player creates an additional bet, and the hand gets one more card and play is done.</li> <li>Stands Pat: If the hand is 21 points or over, or the player chooses to stand pat, the game is over.</li> <li>Resolve Bust: If a hand is over 21, it is resolved as a loser.</li> <li>Dealer plays the hand: The dealer keeps getting a new card if the total point value of the hand is 16 or less, and stops dealing cards at the point value of 17 or more.</li> <li>Dealer Bust: If the dealer\u2019s hand is over 21, the player\u2019s wins the game. Player Hands with two cards totaling 21 ( \u201cblackjack\u201d ) are paid 3:2, all other hands are paid 1:1.</li> <li>Insurance: If the dealer\u2019s up card is an Ace, then the player is offered insurance:</li> <li>Offer Even Money: If the player\u2019s hand totals to a soft 21, a blackjack; the player is offered an even money resolution. If the player accepts, the entire game is resolved at this point. The ante is paid at even money; there is no insurance bet.</li> <li>Offer Insurance: The player is offered insurance, which they can accept by creating a bet. For players with blackjack, this is the second offer after even money is declined. If the player declines, there are no further insurance considerations.</li> <li>Examine Hole Card: The dealer\u2019s hole card is examined. If it has a 10-point value, the insurance bet is resolved as a winner, and the game is over. Otherwise, the insurance is resolved as a loser, the hole card is not revealed, and play continues.</li> <li>Split: If the player\u2019s hand has both cards of equal rank, the player is offered a split. The player accepts by creating an additional Bet. The original hand is removed; The two original cards are split and then the dealer deals two extra cards to create two new Hands. There will not be any further splitting.</li> <li>Game Resolution: The Player\u2019s Hand is compared against the Dealer\u2019s Hand, and the hand with the higher point value wins. In the case of a tie, the bet is returned. When the player wins, a winning hand with two cards totaling 21 (\u201cblackjack\u201d) is paid 3:2, any other winning hand is paid 1:1.</li> </ul> <p>Here is the use case diagram of our Blackjack game:</p> <p></p> <p>Use Case Diagram for Blackjack</p>"},{"location":"case-studies/design-blackjack-and-a-deck-of-cards/#class-diagram","title":"Class Diagram","text":"<p>Here are the main classes of our Blackjack game:</p> <ul> <li>Card: A standard playing card has a suit and point value from 1 to 11.</li> <li>BlackjackCard: In blackjack, cards have different face values. For example, jack, queen, and king, all have a face value of 10. An ace can be counted as either 1 or 11.</li> <li>Deck: A standard playing card deck has 52 cards and 4 suits.</li> <li>Shoe: Contains a set of decks. In casinos, a dealer\u2019s shoe is a gaming device to hold multiple decks of playing cards.</li> <li>Hand: A collection of cards with one or two point values: a hard value (when an ace counts as 1) and a soft value (when an ace counts as 11).</li> <li>Player: Places the initial bets, updates the stake with amounts won and lost. Accepts or declines offered additional bets - including insurance, and split hands. Accepts or declines offered resolution, including even money. Chooses between hit, double and stand options.</li> <li>Game: This class encapsulates the basic sequence of play. It runs the game, offers bets to players, deals the cards from the shoe to hands, updates the state of the game, collects losing bets, pays winning bets, splits hands, and responds to player choices of a hit, double or stand.</li> </ul> <p></p> <p>Class Diagram for Blackjack</p> <p></p> <p>UML for Blackjack</p>"},{"location":"case-studies/design-blackjack-and-a-deck-of-cards/#activity-diagram","title":"Activity Diagram","text":"<p>Blackjack hit or stand: Here are the set of steps to play blackjack with hit or stand:</p> <p></p> <p>Activity Diagram for Blackjack Game</p>"},{"location":"case-studies/design-blackjack-and-a-deck-of-cards/#code","title":"Code","text":"<p>Enums: Here are the required enums:</p> <pre><code>from enum import Enum\n\n\nclass SUIT(Enum):\n    HEART, SPADE, CLUB, DIAMOND = 1, 2, 3, 4\n</code></pre> <p>Card: The following class encapsulates a playing card:</p> Card Class <pre><code>class Card:\n    def __init__(self, suit, face_value):\n        self.__suit = suit\n        self.__face_value = face_value\n\n    def get_suit(self):\n        return self.__suit\n\n    def get_face_value(self):\n        return self.__face_value\n</code></pre> <p>BlackjackCard: BlackjackCard extends from Card class to represent a blackjack card:</p> <pre><code>from .card import *\n\n\nclass BlackjackCard(Card):\n    def __init__(self, suit, face_value):\n        super().__init__(suit, face_value)\n        self.__game_value = face_value\n        if self.__game_value &gt; 10:\n            self.__game_value = 10\n\n    def get_game_value(self):\n        return self.__game_value\n</code></pre> <p>Deck and Shoe: Shoe contains cards from multiple decks:</p> <pre><code>import random\nfrom datetime import datetime\nfrom .blackjack_card import *\nfrom .constants import *\n\n\nclass Deck:\n    def __init__(self):\n        self.__cards = []\n        self.__creation_date = datetime.date.today()\n        for value in range(1, 14):\n            for suit in SUIT:\n                self.__cards.add(BlackjackCard(suit, value))\n\n    def get_cards(self):\n        self.__cards\n\n\nclass Shoe:\n    def __init__(self, number_of_decks):\n        self.__cards = []\n        self.__number_of_decks = number_of_decks\n        self.create_shoe()\n        self.shuffle()\n\n    def create_shoe(self):\n        for decks in range(0, self.__number_of_decks):\n            self.__cards.add(Deck().get_cards())\n\n    def shuffle(self):\n        card_count = self.__cards.size()\n        for i in range(0, card_count):\n            j = random.randrange(0, card_count - i - 1, 1)\n            self.__cards[i], self.__cards[j] = self.__cards[j], self.__cards[i]\n\n    # Get the next card from the shoe\n    def deal_card(self):\n        if self.__cards.size() == 0:\n            self.create_shoe()\n        return self.__cards.remove(0)\n</code></pre> <p>Hand: Hand class encapsulates a blackjack hand which can contain multiple cards:</p> Hand Class <pre><code>class Hand:\n    def __init__(self, blackjack_card1, blackjack_card2):\n        self.__cards = [blackjack_card1, blackjack_card2]\n\n    def get_scores(self):\n        totals = [0]\n\n        for card in self.__cards:\n            new_totals = []\n            for score in totals:\n                new_totals.add(card.face_value() + score)\n                if card.face_value() == 1:\n                    new_totals.add(11 + score)\n\n            totals = new_totals\n\n        return totals\n\n    def add_card(self, card):\n        self.__cards.add(card)\n\n    # get highest score which is less than or equal to 21\n    def resolve_score(self):\n        scores = self.get_scores()\n        best_score = 0\n        for score in scores:\n            if score &lt;= 21 and score &gt; best_score:\n                best_score = score\n\n        return best_score\n</code></pre> <p>Player: Player class extends from BasePlayer:</p> <pre><code>from abc import ABC\n\n\nclass BasePlayer(ABC):\n    def __init__(self, id, password, balance, status, person):\n        self.__id = id\n        self.__password = password\n        self.__balance = balance\n        self.__status = status\n        self.__person = person\n        self.__hands = []\n\n    def reset_password(self):\n        None\n\n    def get_hands(self):\n        return self.__hands\n\n    def add_hand(self, hand):\n        return self.__hands.add(hand)\n\n    def remove_hand(self, hand):\n        self.__hands.remove(hand)\n\n\nclass Player(BasePlayer):\n    def __init__(self, id, password, balance, status, person):\n        super.__init__(id, password, balance, status, person)\n        self.__bet = 0\n        self.__total_cash = 0\n\n\nclass Dealer(BasePlayer):\n    def __init__(self, id, password, balance, status, person):\n        super.__init__(id, password, balance, status, person)\n</code></pre> <p>Game: This class encapsulates a blackjack game:</p> <pre><code>from .hand import  *\nfrom .player import *\nfrom .deck_shoe import *\n\n\ndef get_bet_from_UI():\n    pass\n\n\ndef get_user_action():\n    pass\n\n\nclass Game:\n    def __init__(self, player, dealer):\n        self.__player = player\n        self.__dealer = dealer\n        self.__MAX_NUM_OF_DECKS = 3\n        self.__shoe = Shoe(self.__MAX_NUM_OF_DECKS)\n\n    def play_action(self, action, hand):\n        switcher = {\n            \"hit\": self.hit(hand),\n            \"split\": self.split(hand),\n            \"stand pat\": None,  # do nothing\n            \"stand\": self.stand()\n        }\n        switcher.get(action, 'Invalid move')\n\n    def hit(self, hand):\n        self.__hand.add_card(self.__shoe.deal_card())\n\n    def stand(self):\n        dealer_score = self.__dealer.get_total_score()\n        player_score = self.__player.get_total_score()\n        hands = self.__player.get_hands()\n        for hand in hands:\n            best_score = hand.resolve_score()\n            if player_score == 21:\n                # blackjack, pay 3: 2 of the bet\n                None\n            elif player_score &gt; dealer_score:\n                # pay player equal to the bet\n                None\n            elif player_score &lt; dealer_score:\n                # collect the bet from the player\n                None\n            else:  # tie\n                # bet goes back to player\n                None\n\n    def split(self, hand):\n        cards = hand.get_cards()\n        self.__player.add_hand(Hand(cards[0], self.__shoe.deal_card()))\n        self.__player.add_hand(Hand(cards[1], self.__shoe.deal_card()))\n        self.__player.remove_hand(hand)\n\n    def start(self):\n        self.__player.place_bet(get_bet_from_UI())\n\n        player_hand = Hand(self.__shoe.deal_card(), self.__shoe.deal_card())\n        self.__player.add_to_hand(player_hand)\n\n        dealer_hand = Hand(self.__shoe.deal_card(), self.__shoe.deal_card())\n        self.__dealer.add_to_hand(dealer_hand)\n\n        while True:\n            hands = self.__player.get_hands()\n            for hand in hands:\n                action = get_user_action(hand)\n                self.play_action(action, hand)\n                if action.equals(\"stand\"):\n                    break\n\n\ndef main():\n    player = Player()\n    dealer = Dealer()\n    game = Game(player, dealer)\n    game.start()\n</code></pre>"},{"location":"case-studies/design-chess/","title":"Design Chess","text":""},{"location":"case-studies/design-chess/#lets-design-a-system-to-play-chess","title":"Let's design a system to play chess","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagram</li> <li>Code</li> </ul> <p>Chess is a two-player strategy board game played on a chessboard, which is a checkered gameboard with 64 squares arranged in an 8\u00d78 grid. There are a few versions of game types that people play all over the world. In this design problem, we are going to focus on designing a two-player online chess game.</p> <p></p> <p>Chess</p>"},{"location":"case-studies/design-chess/#system-requirements","title":"System Requirements","text":"<p>We\u2019ll focus on the following set of requirements while designing the game of chess:</p> <ol> <li>The system should support two online players to play a game of chess.</li> <li>All rules of international chess will be followed.</li> <li>Each player will be randomly assigned a side, black or white.</li> <li>Both players will play their moves one after the other. The white side plays the first move.</li> <li>Players can\u2019t cancel or roll back their moves.</li> <li>The system should maintain a log of all moves by both players.</li> <li>Each side will start with 8 pawns, 2 rooks, 2 bishops, 2 knights, 1 queen, and 1 king.</li> <li>The game can finish either in a checkmate from one side, forfeit or stalemate (a draw), or resignation.</li> </ol>"},{"location":"case-studies/design-chess/#use-case-diagram","title":"Use Case Diagram","text":"<p>We have two actors in our system:</p> <ul> <li>Player: A registered account in the system, who will play the game. The player will play chess moves.</li> <li>Admin: To ban/modify players.</li> </ul> <p>Here are the top use cases for chess:</p> <ul> <li>Player moves a piece: To make a valid move of any chess piece.</li> <li>Resign or forfeit a game: A player resigns from/forfeits the game.</li> <li>Register new account/Cancel membership: To add a new member or cancel an existing member.</li> <li>Update game log: To add a move to the game log.</li> </ul> <p>Here is the use case diagram of our Chess Game:</p> <p></p> <p>Use Case Diagram for Chess</p>"},{"location":"case-studies/design-chess/#class-diagram","title":"Class Diagram","text":"<p>Here are the main classes for chess:</p> <p>Player: Player class represents one of the participants playing the game. It keeps track of which side (black or white) the player is playing. Account: We\u2019ll have two types of accounts in the system: one will be a player, and the other will be an admin. Game: This class controls the flow of a game. It keeps track of all the game moves, which player has the current turn, and the final result of the game. Box: A box represents one block of the 8x8 grid and an optional piece. Board: Board is an 8x8 set of boxes containing all active chess pieces. Piece: The basic building block of the system, every piece will be placed on a box. This class contains the color the piece represents and the status of the piece (that is, if the piece is currently in play or not). This would be an abstract class and all game pieces will extend it. Move: Represents a game move, containing the starting and ending box. The Move class will also keep track of the player who made the move, if it is a castling move, or if the move resulted in the capture of a piece. GameController: Player class uses GameController to make moves. GameView: Game class updates the GameView to show changes to the players.</p> <p></p> <p>Class Diagram for Chess</p> <p></p> <p>UML for Chess</p>"},{"location":"case-studies/design-chess/#activity-diagram","title":"Activity Diagram","text":"<p>Make move: Any Player can perform this activity. Here are the set of steps to make a move:</p> <p></p> <p>Activity Diagram for Chess</p>"},{"location":"case-studies/design-chess/#code","title":"Code","text":"<p>Here is the code for the top use cases.</p> <p>Enums, DataTypes, Constants: Here are the required enums, data types, and constants:</p> PieceType Class <pre><code>class PieceType:\n    ROOK = \"rook\"\n    KNIGHT = \"knight\"\n    BISHOP = \"bishop\"\n    QUEEN = \"queen\"\n    KING = \"king\"\n    PAWN = \"pawn\"\n\n\nCHESS_BOARD_SIZE = 8\n\nINITIAL_PIECE_SET_SINGLE = [\n    (PieceType.ROOK, 0, 0),\n    (PieceType.KNIGHT, 1, 0),\n    (PieceType.BISHOP, 2, 0),\n    (PieceType.QUEEN, 3, 0),\n    (PieceType.KING, 4, 0),\n    (PieceType.BISHOP, 5, 0),\n    (PieceType.KNIGHT, 6, 0),\n    (PieceType.ROOK, 7, 0),\n    (PieceType.PAWN, 0, 1),\n    (PieceType.PAWN, 1, 1),\n    (PieceType.PAWN, 2, 1),\n    (PieceType.PAWN, 3, 1),\n    (PieceType.PAWN, 4, 1),\n    (PieceType.PAWN, 5, 1),\n    (PieceType.PAWN, 6, 1),\n    (PieceType.PAWN, 7, 1)\n]\n</code></pre> <p>Board: To encapsulate a cell on the chess board:</p> <pre><code>from copy import deepcopy\nfrom .pieces import Piece, PieceFactory\nfrom .moves import ChessPosition, MoveCommand\nfrom .constants import CHESS_BOARD_SIZE, INITIAL_PIECE_SET_SINGLE, PieceType\n\n\nclass ChessBoard:\n    def __init__(self, size=CHESS_BOARD_SIZE):\n        self._size = size\n        self._pieces = []\n        self._white_king_position = None\n        self._black_king_position = None\n        self._initialize_pieces(INITIAL_PIECE_SET_SINGLE)\n\n    def _initialize_pieces(self, pieces_setup: list):\n        for piece_tuple in pieces_setup:\n            type = piece_tuple[0]\n            x = piece_tuple[1]\n            y = piece_tuple[2]\n\n            piece_white = PieceFactory.create(type, ChessPosition(x, y), Piece.WHITE)\n            if type == PieceType.KING:\n                piece_white.set_board_handle(self)\n            self._pieces.append(piece_white)\n\n            piece_black = PieceFactory.create(type, ChessPosition(self._size - x - 1, self._size - y - 1), Piece.BLACK)\n            if type == PieceType.KING:\n                piece_black.set_board_handle(self)\n            self._pieces.append(piece_black)\n\n    def get_piece(self, position: ChessPosition) -&gt; Piece:\n        for piece in self._pieces:\n            if piece.position == position:\n                return piece\n        return None\n\n    def beam_search_threat(self, start_position: ChessPosition, own_color, increment_x: int, increment_y: int):\n        threatened_positions = []\n        curr_x = start_position.x_coord\n        curr_y = start_position.y_coord\n        curr_x += increment_x\n        curr_y += increment_y\n        while curr_x &gt;= 0 and curr_y &gt;= 0 and curr_x &lt; self._size and curr_y &lt; self._size:\n            curr_position = ChessPosition(curr_x, curr_y)\n            curr_piece = self.get_piece(curr_position)\n            if curr_piece is not None:\n                if curr_piece.color != own_color:\n                    threatened_positions.append(curr_position)\n                break\n            threatened_positions.append(curr_position)\n            curr_x += increment_x\n            curr_y += increment_y\n        return threatened_positions\n\n    def spot_search_threat(self, start_position: ChessPosition, own_color, increment_x: int, increment_y: int,\n                           threat_only=False, free_only=False):\n        curr_x = start_position.x_coord + increment_x\n        curr_y = start_position.y_coord + increment_y\n\n        if curr_x &gt;= self.size or curr_y &gt;= self.size or curr_x &lt; 0 or curr_y &lt; 0:\n            return None\n\n        curr_position = ChessPosition(curr_x, curr_y)\n        curr_piece = self.get_piece(curr_position)\n        if curr_piece is not None:\n            if free_only:\n                return None\n            return curr_position if curr_piece.color != own_color else None\n        return curr_position if not threat_only else None\n\n    @property\n    def pieces(self):\n        return deepcopy(self._pieces)\n\n    @property\n    def size(self):\n        return self._size\n\n    @property\n    def white_king_position(self):\n        return self._white_king_position\n\n    @property\n    def black_king_position(self):\n        return self._black_king_position\n\n    def execute_move(self, command: MoveCommand):\n        source_piece = self.get_piece(command.src)\n        for idx, target_piece in enumerate(self._pieces):\n            if target_piece.position == command.dst:\n                del self._pieces[idx]\n                break\n        source_piece.move(command.dst)\n\n    def register_king_position(self, position: ChessPosition, color: str):\n        if color == Piece.WHITE:\n            self._white_king_position = position\n        elif color == Piece.BLACK:\n            self._black_king_position = position\n        else:\n            raise RuntimeError(\"Unknown color of the king piece\")\n</code></pre> <p>Piece: An abstract class to encapsulate common functionality of all chess pieces:</p> <pre><code>from abc import ABC\nfrom .constants import PieceType\nfrom .moves import ChessPosition\nfrom .king import King\nfrom .queen import Queen\nfrom .knight import Knight\nfrom .rook import Rook\nfrom .bishop import Bishop\nfrom .pawn import Pawn\n\n\nclass Piece(ABC):\n    BLACK = \"black\"\n    WHITE = \"white\"\n\n    def __init__(self, position: ChessPosition, color):\n        self._position = position\n        self._color = color\n\n    @property\n    def position(self):\n        return self._position\n\n    @property\n    def color(self):\n        return self._color\n\n    def move(self, target_position):\n        self._position = target_position\n\n    def get_threatened_positions(self, board):\n        raise NotImplementedError\n\n    def get_moveable_positions(self, board):\n        raise NotImplementedError\n\n    def symbol(self):\n        black_color_prefix = '\\u001b[31;1m'\n        white_color_prefix = '\\u001b[34;1m'\n        color_suffix = '\\u001b[0m'\n        retval = self._symbol_impl()\n        if self.color == Piece.BLACK:\n            retval = black_color_prefix + retval + color_suffix\n        else:\n            retval = white_color_prefix + retval + color_suffix\n        return retval\n\n    def _symbol_impl(self):\n        raise NotImplementedError\n\nclass PieceFactory:\n    @staticmethod\n    def create(piece_type: str, position: ChessPosition, color):\n        if piece_type == PieceType.KING:\n            return King(position, color)\n\n        if piece_type == PieceType.QUEEN:\n            return Queen(position, color)\n\n        if piece_type == PieceType.KNIGHT:\n            return Knight(position, color)\n\n        if piece_type == PieceType.ROOK:\n            return Rook(position, color)\n\n        if piece_type == PieceType.BISHOP:\n            return Bishop(position, color)\n\n        if piece_type == PieceType.PAWN:\n            return Pawn(position, color)\n</code></pre> <p>King: To encapsulate King as a chess piece:</p> <pre><code>from .pieces import Piece\nfrom .moves import ChessPosition\n\n\nclass King(Piece):\n    SPOT_INCREMENTS = [(1, -1), (1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (-1, -1), (0, -1)]\n\n    def __init__(self, position: ChessPosition, color: str):\n        super().__init__(position, color)\n        self._board_handle = None\n\n    def set_board_handle(self, board):\n        self._board_handle = board\n        self._board_handle.register_king_position(self.position, self.color)\n\n    def move(self, target_position: ChessPosition):\n        Piece.move(self, target_position)\n        self._board_handle.register_king_position(target_position, self.color)\n\n    def get_threatened_positions(self, board):\n        positions = []\n        for increment in King.SPOT_INCREMENTS:\n            positions.append(board.spot_search_threat(self._position, self._color, increment[0], increment[1]))\n        positions = [x for x in positions if x is not None]\n        return positions\n\n    def get_moveable_positions(self, board):\n        return self.get_threatened_positions(board)\n\n    def _symbol_impl(self):\n        return 'KI'\n</code></pre> <p>Queen: To encapsulate Queen as a chess piece:</p> <pre><code>from .pieces import Piece\n\n\nclass Queen(Piece):\n    BEAM_INCREMENTS = [(1, 1), (1, -1), (-1, 1), (-1, -1), (0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def get_threatened_positions(self, board):\n        positions = []\n        for increment in (Queen.BEAM_INCREMENTS):\n            positions += board.beam_search_threat(self._position, self._color, increment[0], increment[1])\n        return positions\n\n    def get_moveable_positions(self, board):\n        return self.get_threatened_positions(board)\n\n    def _symbol_impl(self):\n        return 'QU'\n</code></pre> <p>Knight: To encapsulate Knight as a chess piece:</p> <pre><code>from .pieces import Piece\n\n\nclass Knight(Piece):\n    SPOT_INCREMENTS = [(2, 1), (2, -1), (-2, 1), (-2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]\n\n    def get_threatened_positions(self, board):\n        positions = []\n        for increment in Knight.SPOT_INCREMENTS:\n            positions.append(board.spot_search_threat(self._position, self._color, increment[0], increment[1]))\n        positions = [x for x in positions if x is not None]\n        return positions\n\n    def get_moveable_positions(self, board):\n        return self.get_threatened_positions(board)\n\n    def _symbol_impl(self):\n        return 'KN'\n</code></pre> <p>Rook: To encapsulate Rook as a chess piece:</p> <pre><code>from .pieces import Piece\n\n\nclass Rook(Piece):\n    BEAM_INCREMENTS = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n\n    def get_threatened_positions(self, board):\n        positions = []\n        for increment in Rook.BEAM_INCREMENTS:\n            positions += board.beam_search_threat(self._position, self._color, increment[0], increment[1])\n        return positions\n\n    def get_moveable_positions(self, board):\n        return self.get_threatened_positions(board)\n\n    def _symbol_impl(self):\n        return 'RO'\n</code></pre> <p>Bishop: To encapsulate Bishop as a chess piece:</p> <pre><code>from .pieces import Piece\n\n\nclass Bishop(Piece):\n    BEAM_INCREMENTS = [(1, 1), (1, -1), (-1, 1), (-1, -1)]\n\n    def get_threatened_positions(self, board):\n        positions = []\n        for increment in Bishop.BEAM_INCREMENTS:\n            positions += board.beam_search_threat(self._position, self._color, increment[0], increment[1])\n        return positions\n\n    def get_moveable_positions(self, board):\n        return self.get_threatened_positions(board)\n\n    def _symbol_impl(self):\n        return 'BI'\n</code></pre> <p>Pawn: To encapsulate Pawn as a chess piece:</p> <pre><code>from .pieces import Piece\nfrom .moves import ChessPosition\n\n\nclass Pawn(Piece):\n    SPOT_INCREMENTS_MOVE = [(0, 1)]\n    SPOT_INCREMENTS_MOVE_FIRST = [(0, 1), (0, 2)]\n    SPOT_INCREMENTS_TAKE = [(-1, 1), (1, 1)]\n\n    def __init__(self, position: ChessPosition, color: str):\n        super().__init__(position, color)\n        self._moved = False\n\n    def get_threatened_positions(self, board):\n        positions = []\n        increments = Pawn.SPOT_INCREMENTS_TAKE\n        for increment in increments:\n            positions.append(board.spot_search_threat(self._position, self._color, increment[0], increment[1] if self.color == Piece.WHITE else (-1) * increment[1]))\n        positions = [x for x in positions if x is not None]\n        return positions\n\n    def get_moveable_positions(self, board):\n        positions = []\n        increments = Pawn.SPOT_INCREMENTS_MOVE if self._moved else Pawn.SPOT_INCREMENTS_MOVE_FIRST\n        for increment in increments:\n            positions.append(board.spot_search_threat(self._position, self._color, increment[0], increment[1] if self.color == Piece.WHITE else (-1) * increment[1], free_only=True))\n\n        increments = Pawn.SPOT_INCREMENTS_TAKE\n        for increment in increments:\n            positions.append(board.spot_search_threat(self._position, self._color, increment[0], increment[1] if self.color == Piece.WHITE else (-1) * increment[1], threat_only=True))\n\n        positions = [x for x in positions if x is not None]\n        return positions\n\n    def move(self, target_position):\n        self._moved = True\n        Piece.move(self, target_position)\n\n    def _symbol_impl(self):\n        return 'PA'\n</code></pre> <p>Move: To encapsulate a chess move:</p> ChessPosition Class <pre><code>class ChessPosition:\n    def __init__(self, x_coord, y_coord):\n        self.x_coord = x_coord\n        self.y_coord = y_coord\n\n    def __str__(self):\n        return chr(ord(\"a\") + self.x_coord) + str(self.y_coord + 1)\n\n    def __eq__(self, other):\n        return self.x_coord == other.x_coord and self.y_coord == other.y_coord\n\n    @staticmethod\n    def from_string(string: str):\n        return ChessPosition(ord(string[0]) - ord(\"a\"), int(string[1:]) - 1)\n\n\nclass MoveCommand:\n    def __init__(self, src: ChessPosition, dst: ChessPosition):\n        self.src = src\n        self.dst = dst\n\n    @staticmethod\n    def from_string(string: str):\n        tokens = string.split(\" \")\n        if len(tokens) != 2:\n            return None\n        src = ChessPosition.from_string(tokens[0])\n        dst = ChessPosition.from_string(tokens[1])\n        if src is None or dst is None:\n            return None\n        return MoveCommand(src, dst)\n</code></pre> <p>Game: To encapsulate a chess game:</p> <pre><code>from copy import deepcopy\nfrom .pieces import Piece\nfrom .render import *\nfrom .moves import *\nfrom .board import ChessBoard\n\n\nclass ChessGameState:\n    def __init__(self, pieces, board_size):\n        self.pieces = pieces\n        self.board_size = board_size\n\n\nclass ChessGame:\n    STATUS_WHITE_MOVE = \"white_move\"\n    STATUS_BLACK_MOVE = \"black_move\"\n    STATUS_WHITE_VICTORY = \"white_victory\"\n    STATUS_BLACK_VICTORY = \"black_victory\"\n\n    def __init__(self, renderer: InputRender = None):\n        self._finished = False\n        self._board = ChessBoard()\n        self._renderer = renderer\n        self._status = ChessGame.STATUS_WHITE_MOVE\n\n    def run(self):\n        self._renderer.render(self.get_game_state())\n        while not self._finished:\n            command = self._parse_command()\n            if command is None and self._renderer is not None:\n                self._renderer.print_line(\"Invalid command, please re-enter.\")\n                continue\n            if not self._try_move(command):\n                self._renderer.print_line(\"Invalid command, please re-enter.\")\n                continue\n\n            self._board.execute_move(command)\n            if self._status == ChessGame.STATUS_WHITE_MOVE:\n                self._status = ChessGame.STATUS_BLACK_MOVE\n            elif self._status == ChessGame.STATUS_BLACK_MOVE:\n                self._status = ChessGame.STATUS_WHITE_MOVE\n            self._renderer.render(self.get_game_state())\n\n    def _try_move(self, command: MoveCommand):\n        board_copy = deepcopy(self._board)\n        src_piece = board_copy.get_piece(command.src)\n        if src_piece is None:\n            return False\n        if (self._status == ChessGame.STATUS_WHITE_MOVE and src_piece.color == Piece.BLACK) or \\\n                (self._status == ChessGame.STATUS_BLACK_MOVE and src_piece.color == Piece.WHITE):\n            return False\n        if command.dst not in src_piece.get_moveable_positions(board_copy) and \\\n                command.dst not in src_piece.get_threatened_positions(board_copy):\n            return False\n        board_copy.execute_move(command)\n        for piece in board_copy.pieces:\n            if self._status == ChessGame.STATUS_WHITE_MOVE and \\\n                    board_copy.white_king_position in piece.get_threatened_positions(board_copy):\n                return False\n            elif self._status == ChessGame.STATUS_BLACK_MOVE and \\\n                    board_copy.black_king_position in piece.get_threatened_positions(board_copy):\n                return False\n        return True\n\n    def _parse_command(self):\n        input_ = input()\n        return MoveCommand.from_string(input_)\n\n    def get_game_state(self):\n        return ChessGameState(self._board.pieces, self._board.size)\n</code></pre> <p>Render: To encapsulate a chess render:</p> <pre><code>from .moves import ChessPosition\n\n\nclass InputRender:\n    def render(self, game_state):\n        raise NotImplementedError\n\n    def print_line(self, string):\n        raise NotImplementedError\n\n\nclass ConsoleRender(InputRender):\n    def render(self, game):\n        for i in reversed(range(0, game.board_size)):\n            self._draw_board_line(i, game.pieces, game.board_size)\n        self._draw_bottom_line(game.board_size)\n\n    def print_line(self, string):\n        print(string)\n\n    def _draw_time_line(self, countdown_white, countdown_black):\n        print(\"Time remaining: {}s W / B {}s\".format(countdown_white, countdown_black))\n\n    def _draw_board_line(self, line_number, pieces, board_size):\n        empty_square = \" \"\n        white_square_prefix = \"\\u001b[47m\"\n        black_square_prefix = \"\\u001b[40m\"\n        reset_suffix = \"\\u001b[0m\"\n        black_first_offset = line_number % 2\n\n        legend = \"{:&lt;2} \".format(line_number + 1)\n        print(legend, end='')\n        for i in range(0, board_size):\n            is_black = (i + black_first_offset) % 2\n            prefix = black_square_prefix if is_black else white_square_prefix\n            contents = empty_square\n            curr_position = ChessPosition(i, line_number)\n            for piece in pieces:\n                if curr_position == piece.position:\n                    contents = piece.symbol()\n            square_str = prefix + contents + reset_suffix\n            print(square_str, end='')\n        print()\n\n    def _draw_bottom_line(self, board_size):\n        vertical_legend_offset = 3\n        line = \" \" * vertical_legend_offset\n        for i in range(0, board_size):\n            line += chr(ord(\"a\") + i)\n        print(line)\n</code></pre> <p>Player: To encapsulate a chess player:</p> <pre><code>from .render import ConsoleRender\nfrom .game import ChessGame\n\n\nclass Player:\n    def play_chess(self):\n        render = ConsoleRender()\n        game = ChessGame(render)\n        game.run()\n\n\nif __name__ == \"__main__\":\n    player = Player\n    player.play_chess()\n</code></pre>"},{"location":"case-studies/design-cricinfo/","title":"Design Cricinfo","text":""},{"location":"case-studies/design-cricinfo/#lets-design-cricinfo","title":"Let's design Cricinfo","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagram</li> <li>Code</li> </ul> <p>Cricinfo is a sports news website exclusively for the game of cricket. The site features live coverage of cricket matches containing ball-by-ball commentary and a database for all the historic matches. The site also provides news and articles about cricket.</p> <p></p> <p>Cricinfo</p>"},{"location":"case-studies/design-cricinfo/#system-requirements","title":"System Requirements","text":"<p>We will focus on the following set of requirements while designing Cricinfo:</p> <ol> <li>The system should keep track of all cricket-playing teams and their matches.</li> <li>The system should show live ball-by-ball commentary of cricket matches.</li> <li>All international cricket rules should be followed.</li> <li>Any team playing a tournament will announce a squad (a set of players) for the tournament.</li> <li>For each match, both teams will announce their playing-eleven from the tournament squad.</li> <li>The system should be able to record stats about players, matches, and tournaments.</li> <li>The system should be able to answer global stats queries like, \u201cWho is the highest wicket taker of all time?\u201d, \u201cWho has scored maximum numbers of 100s in test matches?\u201d, etc.</li> <li>The system should keep track of all ODI, Test and T20 matches.</li> </ol>"},{"location":"case-studies/design-cricinfo/#use-case-diagram","title":"Use Case Diagram","text":"<p>We have two main Actors in our system:</p> <ul> <li>Admin: An Admin will be able to add/modify players, teams, tournaments, and matches, and will also record ball-by-ball details of each match.</li> <li>Commentator: Commentators will be responsible for adding ball-by-ball commentary for matches.</li> </ul> <p>Here are the top use cases of our system:</p> <ul> <li>Add/modify teams and players: An Admin will add players to teams and keeps up-to-date information about them in the system.</li> <li>Add tournaments and matches: Admins will add tournaments and matches in the system.</li> <li>Add ball: Admins will record ball-by-ball details of a match.</li> <li>Add stadium, umpire, and referee: The system will keep track of stadiums as well as of the umpires and referees managing the matches.</li> <li>Add/update stats: Admins will add stats about matches and tournaments. The system will generate certain stats.</li> <li>Add commentary: Add ball-by-ball commentary of matches.</li> </ul> <p>Here is the use case diagram of Cricinfo:</p> <p></p> <p>Use Case Diagram for Cricinfo</p>"},{"location":"case-studies/design-cricinfo/#class-diagram","title":"Class Diagram","text":"<p>Here are the main classes of the Cricinfo system:</p> <ul> <li>Player: Keeps a record of a cricket player, their basic profile and contracts.</li> <li>Team: This class manages cricket teams.</li> <li>Tournament: Manages cricket tournaments and keeps track of the points table for all playing teams.</li> <li>TournamentSquad: Each team playing a tournament will announce a set of players who will be playing the tournament. TournamentSquad will encapsulate that.</li> <li>Playing11: Each team playing a match will select 11 players from their announced tournaments squad.</li> <li>Match: Encapsulates all information of a cricket match. Our system will support three match types: 1) ODI, 2) T20, and 3) Test</li> <li>Innings: Records all innings of a match.</li> <li>Over: Records details about an Over.</li> <li>Ball: Records every detail of a ball, such as the number of runs scored, if it was a wicket-taking ball, etc.</li> <li>Run: Records the number and type of runs scored on a ball. The different run types are: Wide, LegBy, Four, Six, etc.</li> <li>Commentator and Commentary: The commentator adds ball-by-ball commentary.</li> <li>Umpire and Referee: These classes will store details about umpires and referees, respectively.</li> <li>Stat: Our system will keep track of the stats for every player, match and tournament.</li> <li>StatQuery: This class will encapsulate general stat queries and their answers, like \u201cWho has scored the maximum number of 100s in ODIs?\u201d or, \u201cWhich bowler has taken the most wickets in test matches?\u201d, etc.</li> </ul> <p></p> <p>Class Diagram for Cricinfo</p> <p></p> <p>UML for Cricinfo</p>"},{"location":"case-studies/design-cricinfo/#activity-diagram","title":"Activity Diagram","text":"<p>Record a Ball of an Over: Here are the steps to record a ball of an over in the system:</p> <p></p> <p>Activity Diagram for Cricinfo</p>"},{"location":"case-studies/design-cricinfo/#code","title":"Code","text":"<p>Here is the high-level definition for the classes described above.</p> <p>Enums, data types, and constants: Here are the required enums, data types, and constants:</p> <pre><code>from enum import Enum\n\n\nclass Address:\n    def __init__(self, street, city, state, zip_code, country):\n        self.__street_address = street\n        self.__city = city\n        self.__state = state\n        self.__zip_code = zip_code\n        self.__country = country\n\n\nclass Person():\n    def __init__(self, name, address, email, phone):\n        self.__name = name\n        self.__address = address\n        self.__email = email\n        self.__phone = phone\n\n\nclass MatchFormat(Enum):\n    ODI, T20, TEST = 1, 2, 3\n\n\nclass MatchResult(Enum):\n    LIVE, FINISHED, DRAWN, CANCELLED = 1, 2, 3, 4\n\n\nclass UmpireType(Enum):\n    FIELD, RESERVED, TV = 1, 2, 3\n\n\nclass WicketType(Enum):\n    BOLD, CAUGHT, STUMPED, RUN_OUT, LBW, RETIRED_HURT, HIT_WICKET, OBSTRUCTING = 1, 2, 3, 4, 5, 6, 7, 8\n\n\nclass BallType(Enum):\n    NORMAL, WIDE, WICKET, NO_BALL = 1, 2, 3, 4\n\n\nclass RunType(Enum):\n    NORMAL, FOUR, SIX, LEG_BYE, BYE, NO_BALL, OVERTHROW = 1, 2, 3, 4, 5, 6, 7\n</code></pre> <p>Admin, Player, Umpire, Referee, and Commentator: These classes represent the different people that interact with our system:</p> <pre><code># For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\nclass Player:\n    def __init__(self, person):\n        self.__person = person\n        self.__contracts = []\n\n    def add_contract(self, contract):\n        None\n\n\nclass Admin:\n    def __init__(self, person):\n        self.__person = person\n\n    def add_match(self, match):\n        None\n\n    def add_team(self, team):\n        None\n\n    def add_tournament(self, tournament):\n        None\n\n\nclass Umpire:\n    def __init__(self, person):\n        self.__person = person\n\n    def assign_match(self, match):\n        None\n\n\nclass Referee:\n    def __init__(self, person):\n        self.__person = person\n\n    def assign_match(self, match):\n        None\n\n\nclass Commentator:\n    def __init__(self, person):\n        self.__person = person\n\n    def assign_match(self, match):\n        None\n</code></pre> <p>Team, TournamentSquad, and Playing11: Team will announce a squad for a tournament, out of which, the playing 11 will be chosen:</p> Team Class <pre><code>class Team:\n    def __init__(self, name, coach):\n        self.__name = name\n        self.__players = []\n        self.__news = []\n        self.__coach = coach\n\n    def add_tournament_squad(self, tournament_squad):\n        None\n\n    def add_player(self, player):\n        None\n\n    def add_news(self, news):\n        None\n\n\nclass TournamentSquad:\n    def __init__(self):\n        self.__players = []\n        self.__tournament_stats = []\n\n    def add_player(self, player):\n        None\n\n\nclass Playing11:\n    def __init__(self):\n        self.__players = []\n        self.__twelfth_man = None\n\n    def add_player(self, player):\n        None\n</code></pre> <p>Over, Ball, Wicket, Commentary, Inning, and Match: Match will be an abstract class, extended by ODI, Test, and T20:</p> <pre><code>from datetime import datetime\nfrom abc import ABC\nfrom .constants import MatchResult\n\n\nclass Over:\n    def __init__(self, number):\n        self.__number = number\n        self.__balls = []\n\n    def add_ball(self, ball):\n        None\n\n\nclass Ball:\n    def __init__(self, balled_by, played_by, ball_type, wicket, runs, commentary):\n        self.__balled_by = balled_by\n        self.__played_by = played_by\n        self.__type = ball_type\n\n        self.__wicket = wicket\n        self.__runs = runs\n        self.__commentary = commentary\n\n\nclass Wicket:\n    def __init__(self, wicket_type, player_out, caught_by, runout_by, stumped_by):\n        self.__wicket_type = wicket_type\n        self.__player_out = player_out\n        self.__caught_by = caught_by\n        self.__runout_by = runout_by\n        self.__stumped_by = stumped_by\n\n\nclass Commentary:\n    def __init__(self, text, commentator):\n        self.__text = text\n        self.__created_at = datetime.date.today()\n        self.__created_by = commentator\n\n\nclass Inning:\n    def __init__(self, number, start_time):\n        self.__number = number\n        self.__start_time = start_time\n        self.__overs = []\n\n    def add_over(self, over):\n        None\n\n\n# from abc import ABC, abstractmethod\nclass Match(ABC):\n    def __init__(self, number, start_time, referee):\n        self.__number = number\n        self.__start_time = start_time\n        self.__result = MatchResult.LIVE\n\n        self.__teams = []\n        self.__innings = []\n        self.__umpires = []\n        self.__referee = referee\n        self.__commentators = []\n        self.__match_stats = []\n\n    def assign_stadium(self, stadium):\n        None\n\n    def assign_referee(self, referee):\n        None\n\n\nclass ODI(Match):\n    # ...\n    pass\n\n\nclass Test(Match):\n    # ...\n    pass\n</code></pre>"},{"location":"case-studies/design-facebook/","title":"Design Facebook - a social network","text":""},{"location":"case-studies/design-facebook/#lets-design-facebook-a-social-network","title":"Let's design Facebook - a social network","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagrams</li> <li>Code</li> <li>Extended Requirement</li> </ul> <p>Facebook is an online social networking service where users can connect with other users to post and read messages. Users access Facebook through their website interface or mobile apps.</p> <p></p> <p>Facebook</p>"},{"location":"case-studies/design-facebook/#system-requirements","title":"System Requirements","text":"<p>We will focus on the following set of requirements while designing Facebook:</p> <ol> <li>Each member should be able to add information about their basic profile, work experience, education, etc.</li> <li>Any user of our system should be able to search other members, groups or pages by their name.</li> <li>Members should be able to send and accept/reject friend requests from other members.</li> <li>Members should be able to follow other members without becoming their friend.</li> <li>Members should be able to create groups and pages, as well as join already created groups, and follow pages.</li> <li>Members should be able to create new posts to share with their friends.</li> <li>Members should be able to add comments to posts, as well as like or share a post or comment.</li> <li>Members should be able to create privacy lists containing their friends. Members can link any post with a privacy list to make the post visible only to the members of that list.</li> <li>Any member should be able to send messages to other members.</li> <li>Any member should be able to add a recommendation for any page.</li> <li>The system should send a notification to a member whenever there is a new message or friend request or comment on their post.</li> <li>Members should be able to search through posts for a word.</li> </ol> <p>Extended Requirement: Write a function to find a connection suggestion for a member.</p>"},{"location":"case-studies/design-facebook/#use-case-diagram","title":"Use Case Diagram","text":"<p>We have three main Actors in our system:</p> <ul> <li>Member: All members can search for other members, groups, pages, or posts, as well as send friend requests, create posts, etc.</li> <li>Admin: Mainly responsible for admin functions like blocking and unblocking a member, etc.</li> <li>System: Mainly responsible for sending notifications for new messages, friend requests, etc.</li> </ul> <p>Here are the top use cases of our system:</p> <ul> <li>Add/update profile: Any member should be able to create their profile to reflect their work experiences, education, etc.</li> <li>Search: Members can search for other members, groups or pages. Members can send a friend request to other members.</li> <li>Follow or Unfollow a member or a page: Any member can follow or unfollow any other member or page.</li> <li>Send message: Any member can send a message to any of their friends.</li> <li>Create post: Any member can create a post to share with their friends, as well as like or add comments to any post visible to them.</li> <li>Send notification: The system will be able to send notifications for new messages, friend requests, etc.</li> </ul> <p>Here is the use case diagram of Facebook:</p> <p></p> <p>Use Case Diagram for Facebook</p>"},{"location":"case-studies/design-facebook/#class-diagram","title":"Class Diagram","text":"<p>Here are the main classes of the Facebook system:</p> <ul> <li>Member: This will be the main component of our system. Each member will have a profile which includes their Work Experiences, Education, etc. Members will be connected to other members and they can follow other members and pages. Members will also have suggestions to send friend requests to other members.</li> <li>Search: Our system will support searching for other members, groups and pages by their names, and through posts for any word.</li> <li>Message: Members can send messages to other members with text, photos, and videos.</li> <li>Post: Members can create posts containing text and media, as well as like and share a post.</li> <li>Comment: Members can add comments to posts as well as like any comment.</li> <li>Group: Members can create and join groups.</li> <li>PrivacyList: Members can create privacy lists containing their friends. Members can link any post with a privacy list, to make the post visible only to the members of that list.</li> <li>Page: Members can create pages that other members can follow, and share messages there.</li> <li>Notification: This class will take care of sending notifications to members. The system will be able to send a push notification or an email.</li> </ul> <p></p> <p>Class Diagram for Facebook</p> <p></p> <p>UML for Facebook</p>"},{"location":"case-studies/design-facebook/#activity-diagrams","title":"Activity Diagrams","text":"<p>Add work experience to profile: Any Facebook member can perform this activity. Here are the steps to add work experience to a member\u2019s profile:</p> <p></p> <p>Activity Diagram for Facebook Add Experience to Profile</p> <p>Create a new post: Any Member can perform this activity. Here are the steps for creating a post:</p> <p></p> <p>Activity Diagram for Facebook Create New Post</p>"},{"location":"case-studies/design-facebook/#code","title":"Code","text":"<p>Here is the high-level definition for the classes described above.</p> <p>Enums, data types, and constants: Here are the required enums, data types, and constants:</p> <pre><code>from enum import Enum\n\n\nclass ConnectionInvitationStatus(Enum):\n    PENDING, ACCEPTED, REJECTED, CANCELED = 1, 2, 3, 4\n\n\nclass AccountStatus(Enum):\n    ACTIVE, CLOSED, CANCELED, BLACKLISTED, DISABLED = 1, 2, 3, 4, 5\n\n\nclass Address:\n    def __init__(self, street, city, state, zip_code, country):\n        self.__street_address = street\n        self.__city = city\n        self.__state = state\n        self.__zip_code = zip_code\n        self.__country = country\n</code></pre> <p>Account, Person, Member, and Admin: These classes represent the different people that interact with our system:</p> <pre><code>from abc import ABC\nfrom datetime import datetime\nfrom .constants import AccountStatus, ConnectionInvitationStatus\nfrom .profile import Profile\n\n\n# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\nclass Account:\n    def __init__(self, id, password, status=AccountStatus.Active):\n        self.__id = id\n        self.__password = password\n        self.__status = status\n\n    def reset_password(self):\n        None\n\n\n# from abc import ABC, abstractmethod\nclass Person(ABC):\n    def __init__(self, name, address, email, phone, account):\n        self.__name = name\n        self.__address = address\n        self.__email = email\n        self.__phone = phone\n        self.__account = account\n\n\nclass Member(Person):\n    def __init__(self, id, date_of_membership, name):\n        self.__member_id = id\n        self.__date_of_membership = date_of_membership\n        self.__name = name\n\n        self.__profile = Profile()\n        self.__member_follows = []\n        self.__member_connections = []\n        self.__page_follows = []\n        self.__member_suggestions = []\n        self.__connection_invitations = []\n        self.__group_follows = []\n\n    def send_message(self, message):\n        None\n\n    def create_post(self, post):\n        None\n\n    def send_connection_invitation(self, invitation):\n        None\n\n    def search_member_suggestions(self):\n        None\n\n\nclass Admin(Person):\n    def block_user(self, customer):\n        None\n\n    def unblock_user(self, customer):\n        None\n\n    def enable_page(self, page):\n        None\n\n    def disable_page(self, page):\n        None\n\n\nclass ConnectionInvitation:\n    def __init__(self, member_invited, name, status=ConnectionInvitationStatus.PENDING):\n        self.__member_invited = member_invited\n        self.__status = status\n        self.__date_created = datetime.date.today()\n        self.__date_updated = datetime.date.today()\n\n    def accept_connection(self):\n        None\n\n    def reject_connection(self):\n        None\n</code></pre> <p>Profile and Work: A member\u2019s profile will have their work experiences, educations, places, etc:</p> Profile Class <pre><code>class Profile:\n    def __init__(self, profile_picture, cover_photo, gender):\n        self.__profile_picture = profile_picture\n        self.__cover_photo = cover_photo\n        self.__gender = gender\n\n        self.__work_experiences = []\n        self.__educations = []\n        self.__places = []\n        self.__stats = []\n\n    def add_work_experience(self, work):\n        None\n\n    def add_education(self, education):\n        None\n\n    def add_place(self, place):\n        None\n\n\nclass Work:\n    def __init__(self, title, company, location, date_from, date_to, description):\n        self.__title = title\n        self.__company = company\n        self.__location = location\n        self.__from = date_from\n        self.__to = date_to\n        self.__description = description\n</code></pre> <p>Page and Recommendation: Each page can have multiple recommendations, and members will follow/like pages:</p> <pre><code>from datetime import datetime\n\n\nclass Page:\n    def __init__(self, id, name, description, type, total_members):\n        self.__page_id = id\n        self.__name = name\n        self.__description = description\n        self.__type = type\n        self.__total_members = total_members\n        self.__recommendation = []\n\n    def get_recommendation(self):\n        return self.__recommendation\n\n\nclass Recommendation:\n    def __init__(self, id, rating, description):\n        self.__recommendation_id = id\n        self.__rating = rating\n        self.__description = description\n        self.__created_at = datetime.date.today()\n</code></pre> <p>Group, Post, Message, and Comment: Members can create posts, comment on posts, send messages and join groups:</p> Group Class <pre><code>class Group:\n    def __init__(self, id, name, description, total_members):\n        self.__group_id = id\n        self.__name = name\n        self.__description = description\n        self.__total_members = total_members\n        self.__members = []\n\n    def add_member(self, member):\n        None\n\n    def update_description(self, description):\n        None\n\n\nclass Post:\n    def __init__(self, id, text, total_likes, total_shares, owner):\n        self.__post_id = id\n        self.__text = text\n        self.__total_likes = total_likes\n        self.__total_shares = total_shares\n        self.__owner = owner\n\n\nclass Message:\n    def __init__(self, id, sent_to, body, media):\n        self.__message_id = id\n        self.__sent_to = sent_to\n        self.__message_body = body\n        self.__media = media\n\n    def add_member(self, member):\n        None\n\n\nclass Comment:\n    def __init__(self, id, text, total_likes, owner):\n        self.__comment_id = id\n        self.__text = text\n        self.__total_likes = total_likes\n        self.__owner = owner\n</code></pre> <p>Search interface and SearchIndex: SearchIndex will implement Search to facilitate searching of members, groups, pages, and posts:</p> <pre><code>from abc import ABC\n\n\nclass Search(ABC):\n    def search_member(self, name):\n        None\n\n    def search_group(self, name):\n        None\n\n    def search_page(self, name):\n        None\n\n    def search_post(self, word):\n        None\n\n\nclass SearchIndex(Search):\n    def __init__(self):\n        self.__member_names = {}\n        self.__group_names = {}\n        self.__page_titles = {}\n        self.__posts = {}\n\n    def add_member(self, member):\n        if member.get_name() in self.__member_names:\n            self.__member_names.get(member.get_name()).add(member)\n        else:\n            self.__member_names[member.get_name()] = member\n\n    def add_group(self, group):\n        None\n\n    def add_page(self, page):\n        None\n\n    def add_post(self, post):\n        None\n\n    def search_member(self, name):\n        return self.__member_names.get(name)\n\n    def search_group(self, name):\n        return self.__group_names.get(name)\n\n    def search_page(self, name):\n        return self.__page_titles.get(name)\n\n    def search_post(self, word):\n        return self.__posts.get(word)\n</code></pre>"},{"location":"case-studies/design-facebook/#extended-requirement","title":"Extended Requirement","text":"<p>Let's try to write code for finding connection suggestions for a member.</p> <p>There can be many strategies to search for connection suggestions; we will do a two-level deep breadth-first search to find people who have the most connections with each other. These people could be good candidates for a connection suggestion.</p> <p>Let's try to write a the sample code:</p> <pre><code># This section is for practicing this code\n</code></pre>"},{"location":"case-studies/design-linkedin/","title":"Design LinkedIn","text":""},{"location":"case-studies/design-linkedin/#lets-design-linkedin","title":"Let's design LinkedIn","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagrams</li> <li>Code</li> </ul> <p>LinkedIn is a social network for professionals. The main goal of the site is to enable its members to connect with people they know and trust professionally, as well as to find new opportunities to grow their careers.</p> <p>A LinkedIn member\u2019s profile page, which emphasizes their skills, employment history, and education, has professional network news feeds with customizable modules.</p> <p>LinkedIn is very similar to Facebook in terms of its layout and design. These features are more specialized because they cater to professionals, but in general, if you know how to use Facebook or any other similar social network, LinkedIn is somewhat comparable.LinkedIn is a social network for professionals. The main goal of the site is to enable its members to connect with people they know and trust professionally, as well as to find new opportunities to grow their careers.</p> <p>A LinkedIn member\u2019s profile page, which emphasizes their skills, employment history, and education, has professional network news feeds with customizable modules.</p> <p>LinkedIn is very similar to Facebook in terms of its layout and design. These features are more specialized because they cater to professionals, but in general, if you know how to use Facebook or any other similar social network, LinkedIn is somewhat comparable.</p> <p></p> <p>LinkedIn</p>"},{"location":"case-studies/design-linkedin/#system-requirements","title":"System Requirements","text":"<p>We will focus on the following set of requirements while designing LinkedIn:</p> <ol> <li>Each member should be able to add information about their basic profile, experiences, education, skills, and accomplishments.</li> <li>Any user of our system should be able to search for other members or companies by their name.</li> <li>Members should be able to send or accept connection requests from other members.</li> <li>Any member will be able to request a recommendation from other members.</li> <li>The system should be able to show basic stats about a profile, like the number of profile views, the total number of connections, and the total number of search appearances of the profile.</li> <li>Members should be able to create new posts to share with their connections.</li> <li>Members should be able to add comments to posts, as well as like or share a post or comment.</li> <li>Any member should be able to send messages to other members.</li> <li>The system should send a notification to a member whenever there is a new message, connection invitation or a comment on their post.</li> <li>Members will be able to create a page for a Company and add job postings.</li> <li>Members should be able to create groups and join any group they like.</li> <li>Members should be able to follow other members or companies.</li> </ol>"},{"location":"case-studies/design-linkedin/#use-case-diagram","title":"Use Case Diagram","text":"<p>We have three main Actors in our system:</p> <ul> <li>Member: All members can search for other members, companies or jobs, as well as send requests for connection, create posts, etc.</li> <li>Admin: Mainly responsible for admin functions such as blocking and unblocking a member, etc.</li> <li>System: Mainly responsible for sending notifications for new messages, connections invites, etc.</li> </ul> <p>Here are the top use cases of our system:</p> <ul> <li>Add/update profile: Any member should be able to create their profile to reflect their experiences, education, skills, and accomplishments.</li> <li>Search: Members can search other members, companies or jobs. Members can send a connection request to other members.</li> <li>Follow or Unfollow member or company: Any member can follow or unfollow any other member or a company.</li> <li>Send message: Any member can send a message to any of their connections.</li> <li>Create post: Any member can create a post to share with their connections, as well as like other posts or add comments to any post.</li> <li>Send notifications: The system will be able to send notifications for new messages, connection invites, etc.</li> </ul> <p>Here is the use case diagram of LinkedIn:</p> <p></p> <p>Use Case Diagram for LinkedIn</p>"},{"location":"case-studies/design-linkedin/#class-diagram","title":"Class Diagram","text":"<p>Here are the main classes of the LinkedIn system:</p> <ul> <li>Member: This will be the main component of our system. Each member will have a profile which includes their Experiences, Education, Skills, Accomplishments, and Recommendations. Members will be connected to other members and they can follow companies and members. Members will also have suggestions to make connections with other members.</li> <li>Search: Our system will support searching for other members and companies by their names, and jobs by their titles.</li> <li>Message: Members can send messages to other members with text and media.</li> <li>Post: Members can create posts containing text and media.</li> <li>Comment: Members can add comments to posts as well as like them.</li> <li>Group: Members can create and join groups.</li> <li>Company: Company will store all the information about a company\u2019s page.</li> <li>JobPosting: Companies can create a job posting. This class will handle all information about a job.</li> <li>Notification: Will take care of sending notifications to members.</li> </ul> <p></p> <p>Class Diagram for LinkedIn</p> <p></p> <p>UML for LinkedIn</p>"},{"location":"case-studies/design-linkedin/#activity-diagrams","title":"Activity Diagrams","text":"<p>Add experience to profile: Any LinkedIn member can perform this activity. Here are the steps to add experience to a member profile:</p> <p></p> <p>Activity Diagram for LinkedIn Add Experience to Profile</p> <p>Send message: Any Member can perform this activity. After sending a message, the system needs to send a notification to all the requested members. Here are the steps for sending a message:</p> <p></p> <p>Activity Diagram for LinkedIn Send Message</p>"},{"location":"case-studies/design-linkedin/#code","title":"Code","text":"<p>Here is the high-level definition for the classes described above:</p> <p>Enums, data types, and constants: Here are the required enums, data types, and constants:</p> <pre><code>from enum import Enum\n\n\nclass ConnectionInvitationStatus(Enum):\n    PENDING, ACCEPTED, CONFIRMED, REJECTED, CANCELED = 1, 2, 3, 4, 5\n\n\nclass AccountStatus(Enum):\n    ACTIVE, BLOCKED, BANNED, COMPROMISED, ARCHIVED, UNKNOWN = 1, 2, 3, 4, 5, 6\n\n\nclass Address:\n    def __init__(self, street, city, state, zip_code, country):\n        self.__street_address = street\n        self.__city = city\n        self.__state = state\n        self.__zip_code = zip_code\n        self.__country = country\n</code></pre> <p>Account, Person, Member, and Admin: These classes represent the different people that interact with our system:</p> <pre><code>from abc import ABC\nfrom datetime import datetime\nfrom .constants import AccountStatus\nfrom .profile import Profile\n\n\n# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nclass Account:\n    def __init__(self, id, password, status=AccountStatus.Active):\n        self.__id = id\n        self.__password = password\n        self.__status = status\n\n    def reset_password(self):\n        None\n\n\nclass Person(ABC):\n    def __init__(self, name, address, email, phone, account):\n        self.__name = name\n        self.__address = address\n        self.__email = email\n        self.__phone = phone\n        self.__account = account\n\n\nclass Member(Person):\n    def __init__(self):\n        self.__date_of_membership = datetime.date.today()\n        self.__headline = \"\"\n        self.__photo = []\n        self.__member_suggestions = []\n        self.__member_follows = []\n        self.__member_connections = []\n        self.__company_follows = []\n        self.__group_follows = []\n        self.__profile = Profile()\n\n    def send_message(self, message):\n        None\n\n    def create_post(self, post):\n        None\n\n    def send_connection_invitation(self, connection_invitation):\n        None\n\n\nclass Admin(Person):\n    def block_user(self, customer):\n        None\n\n    def unblock_user(self, customer):\n        None\n</code></pre> <p>Profile, Experience, etc: A member\u2019s profile will have their job experiences, educations, skills, etc:</p> Profile Class <pre><code>class Profile:\n    def __init__(self, summary, experiences, educations, skills, accomplishments, recommendations):\n        self.__summary = summary\n        self.__experiences = experiences\n        self.__educations = educations\n        self.__skills = skills\n        self.__accomplishments = accomplishments\n        self.__recommendations = recommendations\n        self.__stats = []\n\n    def add_experience(self, experience):\n        None\n\n    def add_education(self, education):\n        None\n\n    def add_skill(self, skill):\n        None\n\n    def add_accomplishment(self, accomplishment):\n        None\n\n    def add_recommendation(self, recommendation):\n        None\n\n\nclass Experience:\n    def __init__(self, title, company, location, date_from, date_to, description):\n        self.__title = title\n        self.__company = company\n        self.__location = location\n        self.__from = date_from\n        self.__to = date_to\n        self.__description = description\n</code></pre> <p>Company and JobPosting: Companies can have multiple job postings:</p> <pre><code>from datetime import datetime\n\n\nclass Company:\n    def __init__(self, name, description, type, company_size):\n        self.__name = name\n        self.__description = description\n        self.__type = type\n        self.__company_size = company_size\n\n        self.__active_job_postings = []\n\n\nclass JobPosting:\n    def __init__(self, description, employment_type, location, is_fulfilled):\n        self.__date_of_posting = datetime.date.today()\n        self.__description = description\n        self.__employment_type = employment_type\n        self.__location = location\n        self.__is_fulfilled = is_fulfilled\n</code></pre> <p>Group, Post, and Message: Members can create posts, send messages, and join groups:</p> Group Class <pre><code>class Group:\n    def __init__(self, name, description):\n        self.__name = name\n        self.__description = description\n        self.__total_members = 0\n        self.__members = []\n\n    def add_member(self, member):\n        None\n\n    def update_description(self, description):\n        None\n\n\nclass Post:\n    def __init__(self, text, owner):\n        self.__text = text\n        self.__total_likes = 0\n        self.__total_shares = 0\n        self.__owner = owner\n\n\nclass Message:\n    def __init__(self, sent_to, message_body, media):\n        self.__sent_to = sent_to\n        self.__message_body = message_body\n        self.__media = media\n</code></pre> <p>Search interface and SearchIndex: SearchIndex will implement the Search interface to facilitate searching for members, companies and job postings:</p> Search Class <pre><code>class Search:\n    def search_member(self, name):\n        None\n\n    def search_company(self, name):\n        None\n\n    def search_job(self, title):\n        None\n\n\nclass SearchIndex(Search):\n    def __init__(self):\n        self.__member_names = {}\n        self.__company_names = {}\n        self.__job_titles = {}\n\n    def add_member(self, member):\n        if member.get_name() in self.__member_names:\n            self.__member_names.get(member.get_name()).add(member)\n        else:\n            self.__member_names[member.get_name()] = member\n\n    def add_company(self, company):\n        None\n\n    def add_job_posting(self, job_posting):\n        None\n\n    def search_member(self, name):\n        return self.__member_names.get(name)\n\n    def search_company(self, name):\n        return self.__company_names.get(name)\n\n    def search_job(self, title):\n        return self.__job_titles.get(title)\n</code></pre>"},{"location":"case-studies/design-stack-overflow/","title":"Design Stack Overflow","text":""},{"location":"case-studies/design-stack-overflow/#lets-design-an-online-community-for-developers","title":"Let's design an online community for developers.","text":"<p>We'll cover the following:</p> <ul> <li>System Requirements</li> <li>Use Case Diagram</li> <li>Class Diagram</li> <li>Activity Diagram</li> <li>Sequence Diagram</li> <li>Code</li> </ul> <p>Stack Overflow is one of the largest online communities for developers to learn and share their knowledge. The website provides a platform for its users to ask and answer questions, and through membership and active participation, to vote questions and answers up or down. Users can edit questions and answers in a fashion similar to a wiki.</p> <p>Users of Stack Overflow can earn reputation points and badges. For example, a person is awarded ten reputation points for receiving an \u201cup\u201d vote on an answer and five points for the \u201cup\u201d vote of a question. The can also receive badges for their valued contributions. A higher reputation lets users unlock new privileges like the ability to vote, comment on, and even edit other people\u2019s posts.</p> <p></p> <p>Stack Overflow - Online Community for Developers</p>"},{"location":"case-studies/design-stack-overflow/#system-requirements","title":"System Requirements","text":"<p>We will be designing a system with the following requirements:</p> <ol> <li>Any non-member (guest) can search and view questions. However, to add or upvote a question, they have to become a member.</li> <li>Members should be able to post new questions.</li> <li>Members should be able to add an answer to an open question.</li> <li>Members can add comments to any question or answer.</li> <li>A member can upvote a question, answer or comment.</li> <li>Members can flag a question, answer or comment, for serious problems or moderator attention.</li> <li>Any member can add a bounty to their question to draw attention.</li> <li>Members will earn badges for being helpful.</li> <li>Members can vote to close a question; Moderators can close or reopen any question.</li> <li>Members can add tags to their questions. A tag is a word or phrase that describes the topic of the question.</li> <li>Members can vote to delete extremely off-topic or very low-quality questions.</li> <li>Moderators can close a question or undelete an already deleted question.</li> <li>The system should also be able to identify most frequently used tags in the questions.</li> </ol>"},{"location":"case-studies/design-stack-overflow/#use-case-diagram","title":"Use Case Diagram","text":"<p>We have five main actors in our system:</p> <ul> <li>Admin: Mainly responsible for blocking or unblocking members.</li> <li>Guest: All guests can search and view questions.</li> <li>Member: Members can perform all activities that guests can, in addition to which they can add/remove questions, answers, and comments. Members can delete and un-delete their questions, answers or comments.</li> <li>Moderator: In addition to all the activities that members can perform, moderators can close/delete/undelete any question.</li> <li>System: Mainly responsible for sending notifications and assigning badges to members.</li> </ul> <p>Here are the top use cases for Stack Overflow:</p> <ol> <li>Search questions.</li> <li>Create a new question with bounty and tags.</li> <li>Add/modify answers to questions.</li> <li>Add comments to questions or answers.</li> <li>Moderators can close, delete, and un-delete any question.</li> </ol> <p>Here is the use case diagram of Stack Overflow:</p> <p></p> <p>Use Case Diagram for Stack Overflow</p>"},{"location":"case-studies/design-stack-overflow/#class-diagram","title":"Class Diagram","text":"<p>Here are the main classes of Stack Overflow System:</p> <ul> <li>Question: This class is the central part of our system. It has attributes like Title and Description to define the question. In addition to this, we will track the number of times a question has been viewed or voted on. We should also track the status of a question, as well as closing remarks if the question is closed.</li> <li>Answer: The most important attributes of any answer will be the text and the view count. In addition to that, we will also track the number of times an answer is voted on or flagged. We should also track if the question owner has accepted an answer.</li> <li>Comment: Similar to answer, comments will have text, and view, vote, and flag counts. Members can add comments to questions and answers.</li> <li>Tag: Tags will be identified by their names and will have a field for a description to define them. We will also track daily and weekly frequencies at which tags are associated with questions.</li> <li>Badge: Similar to tags, badges will have a name and description.</li> <li>Photo: Questions or answers can have photos.</li> <li>Bounty: Each member, while asking a question, can place a bounty to draw attention. Bounties will have a total reputation and an expiry date.</li> <li>Account: We will have four types of accounts in the system, guest, member, admin, and moderator. Guests can search and view questions. Members can ask questions and earn reputation by answering questions and from bounties.</li> <li>Notification: This class will be responsible for sending notifications to members and assigning badges to members based on their reputations.</li> </ul> <p></p> <p>Class Diagram for Stack Overflow</p> <p></p> <p>UML for Stack Overflow</p>"},{"location":"case-studies/design-stack-overflow/#activity-diagram","title":"Activity Diagram","text":"<p>Post a new question: Any member or moderator can perform this activity. Here are the steps to post a question:</p> <p></p> <p>Activity Diagram for Stack Overflow</p>"},{"location":"case-studies/design-stack-overflow/#sequence-diagram","title":"Sequence Diagram","text":"<p>Following is the sequence diagram for creating a new question:</p> <p></p> <p>Sequence Diagram for Stack Overflow</p>"},{"location":"case-studies/design-stack-overflow/#code","title":"Code","text":"<p>Here is the high-level definition for the classes described above.</p> <p>Enums, data types, and constants: Here are the required enums, data types, and constants:</p> <pre><code>from enum import Enum\n\n\nclass QuestionStatus(Enum):\n    OPEN, CLOSED, ON_HOLD, DELETED = 1, 2, 3, 4\n\n\nclass QuestionClosingRemark(Enum):\n    DUPLICATE, OFF_TOPIC, TOO_BROAD, NOT_CONSTRUCTIVE, NOT_A_REAL_QUESTION, PRIMARILY_OPINION_BASED = 1, 2, 3, 4, 5, 6\n\n\nclass AccountStatus(Enum):\n    ACTIVE, CLOSED, CANCELED, BLACKLISTED, BLOCKED = 1, 2, 3, 4, 5\n</code></pre> <p>Account, Member, Admin, and Moderator: These classes represent the different people that interact with our system:</p> <pre><code>from .constants import *\n\n\n# For simplicity, we are not defining getter and setter functions. The reader can\n# assume that all class attributes are private and accessed through their respective\n# public getter methods and modified only through their public methods function.\n\n\nclass Account:\n    def __init__(self, id, password, name, address, email, phone, status=AccountStatus.Active):\n        self.__id = id\n        self.__password = password\n        self.__name = name\n        self.__address = address\n        self.__email = email\n        self.__phone = phone\n        self.__status = status\n        self.__reputation = 0\n\n    def reset_password(self):\n        None\n\n\nclass Member:\n    def __init__(self, account):\n        self.__account = account\n        self.__badges = []\n\n    def get_reputation(self):\n        return self.__account.get_reputation()\n\n    def get_email(self):\n        return self.__account.get_email()\n\n    def create_question(self, question):\n        None\n\n    def create_tag(self, tag):\n        None\n\n\nclass Admin(Member):\n    def block_member(self, member):\n        None\n\n    def unblock_member(self, member):\n        None\n\n\nclass Moderator(Member):\n    def close_question(self, question):\n        None\n\n    def undelete_question(self, question):\n        None\n</code></pre> <p>Badge, Tag, and Notification: Members have badges, questions have tags and notifications:</p> <pre><code>from datetime import datetime\n\n\nclass Badge:\n    def __init__(self, name, description):\n        self.__name = name\n        self.__description = description\n\n\nclass Tag:\n    def __init__(self, name, description):\n        self.__name = name\n        self.__description = description\n        self.__daily_asked_frequency = 0\n        self.__weekly_asked_frequency = 0\n\n\nclass Notification:\n    def __init__(self, id, content):\n        self.__notification_id = id\n        self.__created_on = datetime.datetime.now()\n        self.__content = content\n\n    def send_notification(self):\n        None\n</code></pre> <p>Photo and Bounty: Members can put bounties on questions. Answers and Questions can have multiple photos:</p> <pre><code>from datetime import datetime\n\nclass Photo:\n    def __init__(self, id, path, member):\n        self.__photo_id = id\n        self.__photo_path = path\n        self.__creation_date = datetime.now()\n        self.__creating_member = member\n\n    def delete(self):\n        None\n\n\nclass Bounty:\n    def __init__(self, reputation, expiry):\n        self.__reputation = reputation\n        self.__expiry = expiry\n\n    def modify_reputation(self, reputation):\n        None\n</code></pre> <p>Question, Comment and Answer: Members can ask questions, as well as add an answer to any question. All members can add comments to all open questions or answers:</p> <pre><code>from datetime import datetime\nfrom abc import ABC\nfrom .constants import *\n\nclass Search(ABC):\n    def search(self, query):\n        None\n\n\nclass Question(Search):\n    def __init__(self, title, description, bounty, asking_member):\n        self.__title = title\n        self.__description = description\n        self.__view_count = 0\n        self.__vote_count = 0\n        self.__creation_time = datetime.now()\n        self.__update_time = datetime.now()\n        self.__status = QuestionStatus.OPEN\n        self.__closing_remark = QuestionClosingRemark.DUPLICATE\n\n        self.__bounty = bounty\n        self.__asking_member = asking_member\n        self.__photos = []\n        self.__comments = []\n        self.__answers = []\n\n    def close(self):\n        None\n\n    def undelete(self):\n        None\n\n    def add_comment(self, comment):\n        None\n\n    def add_bounty(self, bounty):\n        None\n\n    def search(self, query):\n        # return all questions containing the string query in their title or description.\n        None\n\n\nclass Comment:\n    def __init__(self, text, member):\n        self.__text = text\n        self.__creation_time = datetime.now()\n        self.__flag_count = 0\n        self.__vote_count = 0\n        self.__asking_member = member\n\n    def increment_vote_count(self):\n        None\n\n\nclass Answer:\n    def __init__(self, text, member):\n        self.__answer_text = text\n        self.__accepted = False\n        self.__vote_count = 0\n        self.__flag_count = 0\n        self.__creation_time = datetime.now()\n        self.__creating_member = member\n        self.__photos = []\n\n    def increment_vote_count(self):\n        None\n</code></pre>"},{"location":"oop-fundamentals/","title":"Object-Oriented Design and UML","text":"<p>This section covers the essential fundamentals of Object-Oriented Design and UML diagrams that are crucial for system design interviews.</p>"},{"location":"oop-fundamentals/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>Object-Oriented Basics: Understand the core principles of OOP including encapsulation, inheritance, abstraction, and polymorphism</li> <li>Object-Oriented Analysis and Design: Learn a systematic approach to analyzing requirements and designing solutions</li> <li>UML Diagrams: Master various UML diagram types and when to use them</li> </ul>"},{"location":"oop-fundamentals/#chapter-overview","title":"Chapter Overview","text":"<ul> <li> Object Oriented Basics</li> </ul> <p>The fundamental concepts and principles of object-oriented programming.</p> <ul> <li> OO Analysis and Design</li> </ul> <p>How to analyze problems and design solutions using object-oriented methodology.</p> <ul> <li>:material-language-uml: What is UML?</li> </ul> <p>An introduction to the Unified Modeling Language and its purpose.</p> <ul> <li> Use Case Diagrams</li> </ul> <p>How to represent system functionality from an external observer's point of view.</p> <ul> <li> Class Diagram</li> </ul> <p>How to represent the static structure of a system including classes, attributes, and relationships.</p> <ul> <li> Sequence Diagram</li> </ul> <p>How to show object interactions arranged in time sequence.</p> <ul> <li> Activity Diagrams</li> </ul> <p>How to represent the flow of control from activity to activity.</p>"},{"location":"oop-fundamentals/#why-this-matters-for-interviews","title":"Why This Matters for Interviews","text":"<p>In system design interviews, understanding Object-Oriented Design principles and UML diagrams is essential because:</p> <ol> <li>Clarity of Communication: UML diagrams help communicate your design clearly to interviewers</li> <li>Structured Thinking: OOD principles demonstrate your ability to structure complex systems</li> <li>Design Validation: UML helps validate your design before implementation</li> <li>Industry Standard: These techniques are widely used in the software industry</li> </ol> <p>Interview Tip</p> <p>When discussing your design in an interview, start with a high-level overview using a UML diagram before diving into implementation details.</p>"},{"location":"oop-fundamentals/activity-diagrams/","title":"Activity Diagrams","text":"<p>We use Activity Diagrams to illustrate the flow of control in a system. An activity diagram shows the flow of control for a system functionality; it emphasizes the condition of flow and the sequence in which it happens. We can also use an activity diagram to refer to the steps involved in the execution of a use case.</p> <p>Activity diagrams illustrate the dynamic nature of a system by modeling the flow of control from activity to activity. An activity represents an operation on some class in the system that results in a change in the state of the system. Typically, activity diagrams are used to model workflow or business processes and internal operations.</p> <p>Following is an activity diagram for a user performing online shopping:</p> <p></p> <p>Sample activity diagram for online shopping</p> <p>What is the difference between Activity diagram and Sequence diagram?</p> <p>Activity diagram captures the process flow. It is used for functional modeling. A functional model represents the flow of values from external inputs, through operations and internal data stores, to external outputs.</p> <p>Sequence diagram tracks the interaction between the objects. It is used for dynamic modeling, which is represented by tracking states, transitions between states, and the events that trigger these transitions.</p>"},{"location":"oop-fundamentals/class-diagram/","title":"Class Diagram","text":"<p>Class diagram is the backbone of object-oriented modeling - it shows how different entities (people, things, and data) relate to each other. In other words, it shows the static structures of the system.</p> <p>A class diagram describes the attributes and operations of a class and also the constraints imposed on the system. Class diagrams are widely used in the modeling of object-oriented systems because they are the only UML diagrams that can be mapped directly to object-oriented languages.</p> <p>The purpose of the class diagram can be summarized as:</p> <ol> <li>Analysis and design of the static view of an application.</li> <li>To describe the responsibilities of a system.</li> <li>To provide a base for component and deployment diagrams.</li> <li>Forward and reverse engineering.</li> </ol> <p>A class is depicted in the class diagram as a rectangle with three horizontal sections, as shown in the figure below. The upper section shows the class\u2019s name (Flight), the middle section contains the properties of the class, and the lower section contains the class\u2019s operations (or \u201cmethods\u201d).</p> <p> </p> <p>These are the different types of relationships between classes:</p> <p>Association: If two classes in a model need to communicate with each other, there must be a link between them. This link can be represented by an association. Associations can be represented in a class diagram by a line between these classes with an arrow indicating the navigation direction.</p> <ul> <li>By default, associations are always assumed to be bi-directional; this means that both classes are aware of each other and their relationship. In the diagram below, the association between Pilot and FlightInstance is bi-directional, as both classes know each other.</li> <li>By contrast, in a uni-directional association, two classes are related - but only one class knows that the relationship exists. In the below example, only Flight class knows about Aircraft; hence it is a uni-directional association</li> </ul> <p>Multiplicity: Multiplicity indicates how many instances of a class participate in the relationship. It is a constraint that specifies the range of permitted cardinalities between two classes. For example, in the diagram below, one FlightInstance will have two Pilots, while a Pilot can have many FlightInstances. A ranged multiplicity can be expressed as \u201c0\u2026*\u201d which means \u201czero to many\" or as \u201c2\u20264\u201d which means \u201ctwo to four\u201d.</p> <p>We can indicate the multiplicity of an association by adding multiplicity adornments to the line denoting the association. The below diagram, demonstrates that a FlightInstance has exactly two Pilots but a Pilot can have many FlightInstances.</p> <p></p> <p>Sample class diagram for flight reservation system</p> <p>Aggregation: Aggregation is a special type of association used to model a \u201cwhole to its parts\u201d relationship. In a basic aggregation relationship, the lifecycle of a PART class is independent of the WHOLE class\u2019s lifecycle. In other words, aggregation implies a relationship where the child can exist independently of the parent. In the above diagram, Aircraft can exist without Airline.</p> <p>Composition: The composition aggregation relationship is just another form of the aggregation relationship, but the child class\u2019s instance lifecycle is dependent on the parent class\u2019s instance lifecycle. In other words, Composition implies a relationship where the child cannot exist independent of the parent. In the above example, WeeklySchedule is composed in Flight which means when Flight lifecycle ends, WeeklySchedule automatically gets destroyed.</p> <p>Generalization: Generalization is the mechanism for combining similar classes of objects into a single, more general class. Generalization identifies commonalities among a set of entities. In the above diagram, Crew, Pilot, and Admin, all are Person.</p> <p>Dependency: A dependency relationship is a relationship in which one class, the client, uses or depends on another class, the supplier. In the above diagram, FlightReservation depends on Payment.</p> <p>Abstract Class: An abstract class is identified by specifying its name in italics. In the above diagram, both Person and Account classes are abstract classes.</p> <p> </p>"},{"location":"oop-fundamentals/object-oriented-analysis-and-design/","title":"Object Oriented Analysis and Design","text":"<p>Object Oriented Analysis and Design is a structured method for analyzing and designing a system by applying object-oriented concepts. This design process consists of an investigation into the objects constituting the system. It starts by first identifying the objects of the system and then figuring out the interactions between various objects.</p> <p>The process of object oriented analysis and design can be described as:</p> <ol> <li>Identifying the objects in a system.</li> <li>Defining relationships between objects.</li> <li>Establishing the interface of each object.</li> <li>Making a design, which can be converted to executables using object-oriented languages.</li> </ol> <p>We need a standard method/tool to document all this information; for this purpose we use UML. UML can be considered as the successor of object-oriented (OO) analysis and design. UML is powerful enough to represent all the concepts that exist in object-oriented analysis and design. UML diagrams are a representation of object-oriented concepts only. Thus, before learning UML, it is essential to understand object-oriented concepts.</p> <p>Let\u2019s find out how we can model using UML.</p>"},{"location":"oop-fundamentals/object-oriented-basics/","title":"Object Oriented Basics","text":"<p>Object-oriented programming (OOP) is a style of programming that focuses on using objects to design and build applications. Contrary to procedure-oriented programming where programs are designed as blocks of statements to manipulate data, OOP organizes the program to combine data and functionality and wrap it inside something called an \u201cObject\u201d.</p> <p>If you have never used an object-oriented programming language before, you will need to learn a few basic concepts before you can begin writing any code. This chapter will introduce some basic concepts of OOP:</p> <ul> <li> <p>Objects: Objects represent a real-world entity and the basic building block of OOP. For example, an Online Shopping System will have objects such as shopping cart, customer, product item, etc.</p> </li> <li> <p>Class: Class is the prototype or blueprint of an object. It is a template definition of the attributes and methods of an object. For example, in the Online Shopping System, the Customer object will have attributes like shipping address, credit card, etc., and methods for placing an order, canceling an order, etc.</p> </li> </ul> <p>A Simple Code Snippet of Class and Object</p> <p>Class Code Snippet:</p> ShoppingCart Class <pre><code>class ShoppingCart(object):\n\n    def __init__(self):\n      self.total = 0\n      self.items = {}\n\n    def add_item(self, item_name, quantity, price):\n        self.total += (quantity * price)\n        self.items.update({item_name : quantity})\n\n\n    def remove_item(self, item_name, quantity, price):\n        self.total -= (quantity * price)\n        if quantity &gt; self.items[item_name]:\n          del self.items[item_name]\n        self.items[item_name] -= quantity\n\n\n    def checkout(self, cash_paid):\n        balance = 0\n        if cash_paid &lt; self.total:\n          return \"You paid {} but cart amount is {}\".format(cash_paid, self.total)\n        balance = cash_paid - self.total\n        return \"Exchange amount: {}\".format(balance)\n</code></pre> <p>Object and it's Uses Code Snippet: <pre><code># Driver code\ncart = ShoppingCart()\n\ncart.add_item('A', 10, 50)\ncart.add_item('B', 5, 20)\n\ncart.remove_item('B', 1, 20)\n\ncart_res = cart.checkout(600)\n\nprint('Total cart amount:', cart.total)\nprint('Cart items:', cart.items)\n\nprint(cart_res)\n</code></pre></p> <p>Response: <pre><code>Total cart amount: 580\nCart items: {'B': 4, 'A': 10}\nExchange amount: 20\n</code></pre></p> <p> </p> <p>The four principles of object-oriented programming are encapsulation, abstraction, inheritance, and polymorphism.</p> <ul> <li>Encapsulation: Encapsulation is the mechanism of binding the data together and hiding it from the outside world. Encapsulation is achieved when each object keeps its state private so that other objects don\u2019t have direct access to its state. Instead, they can access this state only through a set of public functions.</li> </ul> <p>Encapsulation Code Snippet:</p> Product Class <pre><code>class Product:\n\n    def __init__(self):\n        self.__maxprice = 900\n\n    def sell(self):\n        print(\"Selling Price: {}\".format(self.__maxprice))\n\n    def set_max_price(self, price):\n        self.__maxprice = price\n\nproduct = Product()\nproduct.sell()\n\n# change the price\nproduct.__maxprice = 1000\nproduct.sell()\n\n# using setter function\nproduct.set_max_price(1000)\nproduct.sell()\n</code></pre> <p>Response: <pre><code>Selling Price: 900\nSelling Price: 900\nSelling Price: 1000\n</code></pre></p> <ul> <li>Abstraction: Abstraction can be thought of as the natural extension of encapsulation. It means hiding all but the relevant data about an object in order to reduce the complexity of the system. In a large system, objects talk to each other, which makes it difficult to maintain a large code base; abstraction helps by hiding internal implementation details of objects and only revealing operations that are relevant to other objects.</li> </ul> <p>Abstraction Code Snippet:</p> <pre><code>from abc import ABC, abstractmethod\n\nclass Parent(ABC):\n  def common(self):\n    print('In common method of Parent')\n\n  @abstractmethod\n  def vary(self):\n    pass\n\nclass Child1(Parent):\n  def vary(self):\n    print('In vary method of Child1')\n\nclass Child2(Parent):\n  def vary(self):\n    print('In vary method of Child2')\n\n# object of Child1 class\nchild1 = Child1()\nchild1.common()\nchild1.vary()\n\n# object of Child2 class\nchild2 = Child2()\nchild2.common()\nchild2.vary()\n</code></pre> <p>Response: <pre><code>In common method of Parent\nIn vary method of Child1\nIn common method of Parent\nIn vary method of Child2\n</code></pre></p> <ul> <li>Inheritance: Inheritance is the mechanism of creating new classes from existing ones.</li> </ul> <p>Inheritance Code Snippet:</p> Person Class <pre><code>class Person(object): \n\n    def __init__(self, name):\n        self.name = name\n\n    def get_name(self):\n        return self.name\n\n    def is_employee(self):\n        return False\n\n\nclass Employee(Person):\n\n    def is_employee(self): \n        return True\n\n# Driver code\nemp = Person(\"Person 1\")\nprint(\"{} is employee: {}\".format(emp.get_name(), emp.is_employee()))\n\nemp = Employee(\"Employee 1\")\nprint(\"{} is employee: {}\".format(emp.get_name(), emp.is_employee()))\n</code></pre> <p>Response: <pre><code>Person 1 is employee: False\nEmployee 1 is employee: True\n</code></pre></p> <ul> <li>Polymorphism: Polymorphism (from Greek, meaning \u201cmany forms\u201d) is the ability of an object to take different forms and thus, depending upon the context, to respond to the same message in different ways. Take the example of a chess game; a chess piece can take many forms, like bishop, castle, or knight and all these pieces will respond differently to the \u2018move\u2019 message.</li> </ul> <p>Polymorphism Code Snippet:</p> Bishops Class <pre><code>class Bishops:\n\n    def move(self):\n        print(\"Bishops can move diagonally\")\n\nclass Knights:\n\n    def move(self):\n        print(\"Knights can move two squares vertically and one square horizontally, or two squares horizontally and one square vertically\")\n\n# common interface\ndef move_test(chess_piece):\n    chess_piece.move()\n# Driver code\n\n#instantiate objects\nbishop = Bishops()\nknight = Knights()\n\n# passing the object\nmove_test(bishop)\nmove_test(knight)\n</code></pre> <p>Response: <pre><code>Bishops can move diagonally\nKnights can move two squares vertically and one square horizontally, or two squares horizontally and one square vertically\n</code></pre></p>"},{"location":"oop-fundamentals/sequence-diagram/","title":"Sequence Diagram","text":"<p>Sequence diagrams describe interactions among classes in terms of an exchange of messages over time and are used to explore the logic of complex operations, functions or procedures. In this diagram, the sequence of interactions between the objects is represented in a step-by-step manner.</p> <p>Sequence diagrams show a detailed flow for a specific use case or even just part of a particular use case. They are almost self-explanatory; they show the calls between the different objects in their sequence and can explain, at a detailed level, different calls to various objects.</p> <p>A sequence diagram has two dimensions: The vertical dimension shows the sequence of messages in the chronological order that they occur; the horizontal dimension shows the object instances to which the messages are sent.</p> <p></p> <p>Sample sequence diagram for ATM balance inquiry</p> <p>A sequence diagram is straightforward to draw. Across the top of your diagram, identify the class instances (objects) by putting each class instance inside a box (see above figure). If a class instance sends a message to another class instance, draw a line with an open arrowhead pointing to the receiving class instance and place the name of the message above the line. Optionally, for important messages, you can draw a dotted line with an arrowhead pointing back to the originating class instance; label the returned value above the dotted line.</p>"},{"location":"oop-fundamentals/use-case-diagrams/","title":"Use Case Diagrams","text":"<p>Use case diagrams describe a set of actions (called use cases) that a system should or can perform in collaboration with one or more external users of the system (called actors). Each use case should provide some observable and valuable result to the actors.</p> <ol> <li>Use Case Diagrams describe the high-level functional behavior of the system.</li> <li>It answers what system does from the user point of view.</li> <li>Use case answers \u2018What will the system do?\u2019 and at the same time tells us \u2018What will the system NOT do?\u2019.</li> </ol> <p>A use case illustrates a unit of functionality provided by the system. The primary purpose of the use case diagram is to help development teams visualize the functional requirements of a system, including the relationship of \u201cactors\u201d to the essential processes, as well as the relationships among different use cases.</p> <p>To illustrate a use case on a use case diagram, we draw an oval in the middle of the diagram and put the name of the use case in the center of the oval. To show an actor (indicating a system user) on a use-case diagram, we draw a stick figure to the left or right of the diagram.</p> <p></p> <p>Sample use-case diagram for online shopping system</p> <p>The different components of the use case diagram are:</p> <p>System Boundary: A system boundary defines the scope and limits of the system. It is shown as a rectangle that spans all use cases of the system.</p> <p>Actors: An actor is an entity who performs specific actions. These roles are the actual business roles of the users in a given system. An actor interacts with a use case of the system. For example, in a banking system, the customer is one of the actors.</p> <p>Use Case: Every business functionality is a potential use case. The use case should list the discrete business functionality specified in the problem statement.</p> <p>Include: Include relationship represents an invocation of one use case by another use case. From a coding perspective, it is like one function being called by another function.</p> <p>Extend: This relationship signifies that the extended use case will work exactly like the base use case, except that some new steps will be inserted in the extended use case.</p>"},{"location":"oop-fundamentals/what-is-uml/","title":"What is UML?","text":"<p>UML stands for Unified Modeling Language and is used to model the Object-Oriented Analysis of a software system. UML is a way of visualizing and documenting a software system by using a collection of diagrams, which helps engineers, businesspeople, and system architects understand the behavior and structure of the system being designed.</p> <p>Benefits of using UML:</p> <ol> <li>Helps develop a quick understanding of a software system.</li> <li>UML modeling helps in breaking a complex system into discrete pieces that can be easily understood.</li> <li>UML's graphical notations can be used to communicate design decisions.</li> <li>Since UML is independent of any specific platform or language or technology, it is easier to abstract out concepts.</li> <li>It becomes easier to hand the system over to a new team.</li> </ol> <p>Types of UML Diagrams: The current UML standards call for 14 different kinds of diagrams. These diagrams are organized into two distinct groups: structural diagrams and behavioral or interaction diagrams. As the names suggest, some UML diagrams analyze and depict the structure of a system or process, whereas others describe the behavior of the system, its actors, and its building components. The different types are broken down as follows:</p> <p>Structural UML diagrams</p> <ul> <li>Class diagram</li> <li>Object diagram</li> <li>Package diagram</li> <li>Component diagram</li> <li>Composite structure diagram</li> <li>Deployment diagram</li> <li>Profile diagram</li> </ul> <p>Behavioral UML diagrams</p> <ul> <li>Use case diagram</li> <li>Activity diagram</li> <li>Sequence diagram</li> <li>State diagram</li> <li>Communication diagram</li> <li>Interaction overview diagram</li> <li>Timing diagram</li> </ul> <p>Rest of the sections, we will be focusing on the following UML diagrams:</p> <p>Use Case Diagram: Used to describe a set of user scenarios, this diagram, illustrates the functionality provided by the system.</p> <p>Class Diagram: Used to describe structure and behavior in the use cases, this diagram provides a conceptual model of the system in terms of entities and their relationships.</p> <p>Activity Diagram: Used to model the functional flow-of-control between two or more class objects.</p> <p>Sequence Diagram: Used to describe interactions among classes in terms of an exchange of messages over time.</p>"}]}